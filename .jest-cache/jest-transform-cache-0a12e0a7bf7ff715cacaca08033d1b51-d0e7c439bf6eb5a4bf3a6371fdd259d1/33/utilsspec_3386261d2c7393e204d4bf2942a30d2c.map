{"version":3,"sources":["utils.spec.js"],"names":["jest","mock","writeFile","path","data","options","cb","global","console","log","fn","error","describe","it","requestOptions","query","expect","toEqual","url","qs","q","num","defaultLimit","start","defaultStart","headers","defaultUserAgent","toBe","titleSelector","linkSelector","snippetSelector","fs","not","toHaveBeenCalled"],"mappings":";;AAuBAA,IAAI,CAACC,IAAL,CAAU,IAAV,EAAgB;AAAA,SAAO;AACrBC,IAAAA,SAAS,EAAE,mBAACC,IAAD,EAAOC,IAAP,EAAaC,OAAb,EAAsBC,EAAtB,EAA6B;AACtC;AACAA,MAAAA,EAAE,CAAC,IAAD,CAAF;AACD;AAJoB,GAAP;AAAA,CAAhB;;AArBA;;AAEA;;;;AAJA;;AACA;AAiBAC,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,GAAG,EAAET,IAAI,CAACU,EAAL,EADU;AAEfC,EAAAA,KAAK,EAAEX,IAAI,CAACU,EAAL;AAFQ,CAAjB;AAYAE,QAAQ,CAAC,0BAAD,EAA6B,YAAM;AACzCC,EAAAA,EAAE,CAAC,wEAAD,EAA2E,YAAM;AACjF,QAAMC,cAAc,GAAG,qCAAyB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAzB,CAAvB;AACAC,IAAAA,MAAM,CAACF,cAAD,CAAN,CAAuBG,OAAvB,CAA+B;AAC7BC,MAAAA,GAAG,EAAE,+BADwB;AAE7BC,MAAAA,EAAE,EAAE;AACFC,QAAAA,CAAC,EAAE,KADD;AAEFC,QAAAA,GAAG,EAAEC,mBAFH;AAGFC,QAAAA,KAAK,EAAEC;AAHL,OAFyB;AAO7BC,MAAAA,OAAO,EAAE;AACP,sBAAcC;AADP;AAPoB,KAA/B;AAWD,GAbC,CAAF;AAcD,CAfO,CAAR;AAiBAd,QAAQ,CAAC,kBAAD,EAAqB,YAAM;AACjCC,EAAAA,EAAE,CAAC,0FAAD,EAA6F,YAAM;AACnGG,IAAAA,MAAM,CAAC,8BAAD,CAAN,CAA2BW,IAA3B,CAAgCC,oBAAhC;AACD,GAFC,CAAF;AAGD,CAJO,CAAR;AAMAhB,QAAQ,CAAC,iBAAD,EAAoB,YAAM;AAChCC,EAAAA,EAAE,CAAC,0FAAD,EAA6F,YAAM;AACnGG,IAAAA,MAAM,CAAC,6BAAD,CAAN,CAA0BW,IAA1B,CAA+BE,mBAA/B;AACD,GAFC,CAAF;AAGD,CAJO,CAAR;AAMAjB,QAAQ,CAAC,oBAAD,EAAuB,YAAM;AACnCC,EAAAA,EAAE,CAAC,0FAAD,EAA6F,YAAM;AACnGG,IAAAA,MAAM,CAAC,gCAAD,CAAN,CAA6BW,IAA7B,CAAkCG,sBAAlC;AACD,GAFC,CAAF;AAGD,CAJO,CAAR;AAMAlB,QAAQ,CAAC,YAAD,EAAe,YAAM;AAC3BC,EAAAA,EAAE,CAAC,+DAAD,EAAkE,YAAM;AACxE;AACAG,IAAAA,MAAM,CAACe,YAAG7B,SAAJ,CAAN,CAAqB8B,GAArB,CAAyBC,gBAAzB;AACD,GAHC,CAAF;AAKApB,EAAAA,EAAE,CAAC,+EAAD,EAAkF,YAAM;AACxF,2BAAW,sBAAX,EAAmC,EAAnC;AACAG,IAAAA,MAAM,CAACe,YAAG7B,SAAJ,CAAN,CAAqB+B,gBAArB;AACAjB,IAAAA,MAAM,CAACR,OAAO,CAACG,KAAT,CAAN,CAAsBsB,gBAAtB;AACD,GAJC,CAAF;AAKD,CAXO,CAAR","sourcesContent":["/* eslint-disable max-params */\n/* eslint-disable no-console */\nimport fs from 'fs';\n\nimport {\n  getDefaultRequestOptions,\n  getTitleSelector,\n  getLinkSelector,\n  getSnippetSelector,\n  defaultLimit,\n  defaultStart,\n  defaultUserAgent,\n  titleSelector,\n  linkSelector,\n  snippetSelector,\n  saveToFile,\n} from '../src/utils';\n\nglobal.console = {\n  log: jest.fn(),\n  error: jest.fn(),\n};\n\njest.mock('fs', () => ({\n  writeFile: (path, data, options, cb) => {\n    // 1st arg passed to callback is the error\n    cb(true);\n  },\n}));\n\ndescribe('getDefaultRequestOptions', () => {\n  it('uses default limit, start, and userAgent when none of those are passed', () => {\n    const requestOptions = getDefaultRequestOptions({ query: 'foo' });\n    expect(requestOptions).toEqual({\n      url: 'https://www.google.com/search',\n      qs: {\n        q: 'foo',\n        num: defaultLimit,\n        start: defaultStart,\n      },\n      headers: {\n        'User-Agent': defaultUserAgent,\n      },\n    });\n  });\n});\n\ndescribe('getTitleSelector', () => {\n  it('uses the default value when passedValue is null/undefined and the env var does not exist', () => {\n    expect(getTitleSelector()).toBe(titleSelector);\n  });\n});\n\ndescribe('getLinkSelector', () => {\n  it('uses the default value when passedValue is null/undefined and the env var does not exist', () => {\n    expect(getLinkSelector()).toBe(linkSelector);\n  });\n});\n\ndescribe('getSnippetSelector', () => {\n  it('uses the default value when passedValue is null/undefined and the env var does not exist', () => {\n    expect(getSnippetSelector()).toBe(snippetSelector);\n  });\n});\n\ndescribe('saveToFile', () => {\n  it('does not call fs.writeFile when output (1st arg) is undefined', () => {\n    saveToFile();\n    expect(fs.writeFile).not.toHaveBeenCalled();\n  });\n\n  it('calls fs.writeFile when output exists, and console.error when an error occurs', () => {\n    saveToFile('/path/to/output.json', []);\n    expect(fs.writeFile).toHaveBeenCalled();\n    expect(console.error).toHaveBeenCalled();\n  });\n});\n"]}