66a5c67eebc3c0fa7e0c3f8b0c17f5ff
"use strict";

jest.mock('fs', function () {
  return {
    writeFile: jest.fn(function (path, data, options, cb) {
      // 1st arg passed to callback is the error
      cb(true);
    })
  };
});

var _fs = _interopRequireDefault(require("fs"));

var _utils = require("../src/utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable max-params */

/* eslint-disable no-console */
global.console = {
  log: jest.fn(),
  error: jest.fn()
};
describe('getDefaultRequestOptions', function () {
  it('uses default limit, start, and userAgent when none of those are passed', function () {
    var requestOptions = (0, _utils.getDefaultRequestOptions)({
      query: 'foo'
    });
    expect(requestOptions).toEqual({
      url: 'https://www.google.com/search',
      qs: {
        q: 'foo',
        num: _utils.defaultLimit,
        start: _utils.defaultStart
      },
      headers: {
        'User-Agent': _utils.defaultUserAgent
      }
    });
  });
});
describe('getTitleSelector', function () {
  it('uses the default value when passedValue is null/undefined and the env var does not exist', function () {
    expect((0, _utils.getTitleSelector)()).toBe(_utils.titleSelector);
  });
});
describe('getLinkSelector', function () {
  it('uses the default value when passedValue is null/undefined and the env var does not exist', function () {
    expect((0, _utils.getLinkSelector)()).toBe(_utils.linkSelector);
  });
});
describe('getSnippetSelector', function () {
  it('uses the default value when passedValue is null/undefined and the env var does not exist', function () {
    expect((0, _utils.getSnippetSelector)()).toBe(_utils.snippetSelector);
  });
});
describe('saveToFile', function () {
  it('does not call fs.writeFile when output (1st arg) is undefined', function () {
    (0, _utils.saveToFile)();
    expect(_fs.default.writeFile).not.toHaveBeenCalled();
  });
  it('calls fs.writeFile when output exists, and console.error when an error occurs', function () {
    (0, _utils.saveToFile)('/path/to/output.json', []);
    expect(_fs.default.writeFile).toHaveBeenCalled();
    expect(console.error).toHaveBeenCalled();
  });
  it('does not call console.error when an error does not occur', function () {
    _fs.default.writeFile.mockImplementationOnce(function (path, data, options, cb) {
      cb(false);
    });

    console.error.mockClear();
    (0, _utils.saveToFile)('/path/to/output.json', []);
    expect(console.error).not.toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzLnNwZWMuanMiXSwibmFtZXMiOlsiamVzdCIsIm1vY2siLCJ3cml0ZUZpbGUiLCJmbiIsInBhdGgiLCJkYXRhIiwib3B0aW9ucyIsImNiIiwiZ2xvYmFsIiwiY29uc29sZSIsImxvZyIsImVycm9yIiwiZGVzY3JpYmUiLCJpdCIsInJlcXVlc3RPcHRpb25zIiwicXVlcnkiLCJleHBlY3QiLCJ0b0VxdWFsIiwidXJsIiwicXMiLCJxIiwibnVtIiwiZGVmYXVsdExpbWl0Iiwic3RhcnQiLCJkZWZhdWx0U3RhcnQiLCJoZWFkZXJzIiwiZGVmYXVsdFVzZXJBZ2VudCIsInRvQmUiLCJ0aXRsZVNlbGVjdG9yIiwibGlua1NlbGVjdG9yIiwic25pcHBldFNlbGVjdG9yIiwiZnMiLCJub3QiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwibW9ja0ltcGxlbWVudGF0aW9uT25jZSIsIm1vY2tDbGVhciJdLCJtYXBwaW5ncyI6Ijs7QUF1QkFBLElBQUksQ0FBQ0MsSUFBTCxDQUFVLElBQVYsRUFBZ0I7QUFBQSxTQUFPO0FBQ3JCQyxJQUFBQSxTQUFTLEVBQUVGLElBQUksQ0FBQ0csRUFBTCxDQUFRLFVBQUNDLElBQUQsRUFBT0MsSUFBUCxFQUFhQyxPQUFiLEVBQXNCQyxFQUF0QixFQUE2QjtBQUM5QztBQUNBQSxNQUFBQSxFQUFFLENBQUMsSUFBRCxDQUFGO0FBQ0QsS0FIVTtBQURVLEdBQVA7QUFBQSxDQUFoQjs7QUFyQkE7O0FBRUE7Ozs7QUFKQTs7QUFDQTtBQWlCQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2ZDLEVBQUFBLEdBQUcsRUFBRVYsSUFBSSxDQUFDRyxFQUFMLEVBRFU7QUFFZlEsRUFBQUEsS0FBSyxFQUFFWCxJQUFJLENBQUNHLEVBQUw7QUFGUSxDQUFqQjtBQVlBUyxRQUFRLENBQUMsMEJBQUQsRUFBNkIsWUFBTTtBQUN6Q0MsRUFBQUEsRUFBRSxDQUFDLHdFQUFELEVBQTJFLFlBQU07QUFDakYsUUFBTUMsY0FBYyxHQUFHLHFDQUF5QjtBQUFFQyxNQUFBQSxLQUFLLEVBQUU7QUFBVCxLQUF6QixDQUF2QjtBQUNBQyxJQUFBQSxNQUFNLENBQUNGLGNBQUQsQ0FBTixDQUF1QkcsT0FBdkIsQ0FBK0I7QUFDN0JDLE1BQUFBLEdBQUcsRUFBRSwrQkFEd0I7QUFFN0JDLE1BQUFBLEVBQUUsRUFBRTtBQUNGQyxRQUFBQSxDQUFDLEVBQUUsS0FERDtBQUVGQyxRQUFBQSxHQUFHLEVBQUVDLG1CQUZIO0FBR0ZDLFFBQUFBLEtBQUssRUFBRUM7QUFITCxPQUZ5QjtBQU83QkMsTUFBQUEsT0FBTyxFQUFFO0FBQ1Asc0JBQWNDO0FBRFA7QUFQb0IsS0FBL0I7QUFXRCxHQWJDLENBQUY7QUFjRCxDQWZPLENBQVI7QUFpQkFkLFFBQVEsQ0FBQyxrQkFBRCxFQUFxQixZQUFNO0FBQ2pDQyxFQUFBQSxFQUFFLENBQUMsMEZBQUQsRUFBNkYsWUFBTTtBQUNuR0csSUFBQUEsTUFBTSxDQUFDLDhCQUFELENBQU4sQ0FBMkJXLElBQTNCLENBQWdDQyxvQkFBaEM7QUFDRCxHQUZDLENBQUY7QUFHRCxDQUpPLENBQVI7QUFNQWhCLFFBQVEsQ0FBQyxpQkFBRCxFQUFvQixZQUFNO0FBQ2hDQyxFQUFBQSxFQUFFLENBQUMsMEZBQUQsRUFBNkYsWUFBTTtBQUNuR0csSUFBQUEsTUFBTSxDQUFDLDZCQUFELENBQU4sQ0FBMEJXLElBQTFCLENBQStCRSxtQkFBL0I7QUFDRCxHQUZDLENBQUY7QUFHRCxDQUpPLENBQVI7QUFNQWpCLFFBQVEsQ0FBQyxvQkFBRCxFQUF1QixZQUFNO0FBQ25DQyxFQUFBQSxFQUFFLENBQUMsMEZBQUQsRUFBNkYsWUFBTTtBQUNuR0csSUFBQUEsTUFBTSxDQUFDLGdDQUFELENBQU4sQ0FBNkJXLElBQTdCLENBQWtDRyxzQkFBbEM7QUFDRCxHQUZDLENBQUY7QUFHRCxDQUpPLENBQVI7QUFNQWxCLFFBQVEsQ0FBQyxZQUFELEVBQWUsWUFBTTtBQUMzQkMsRUFBQUEsRUFBRSxDQUFDLCtEQUFELEVBQWtFLFlBQU07QUFDeEU7QUFDQUcsSUFBQUEsTUFBTSxDQUFDZSxZQUFHN0IsU0FBSixDQUFOLENBQXFCOEIsR0FBckIsQ0FBeUJDLGdCQUF6QjtBQUNELEdBSEMsQ0FBRjtBQUtBcEIsRUFBQUEsRUFBRSxDQUFDLCtFQUFELEVBQWtGLFlBQU07QUFDeEYsMkJBQVcsc0JBQVgsRUFBbUMsRUFBbkM7QUFDQUcsSUFBQUEsTUFBTSxDQUFDZSxZQUFHN0IsU0FBSixDQUFOLENBQXFCK0IsZ0JBQXJCO0FBQ0FqQixJQUFBQSxNQUFNLENBQUNQLE9BQU8sQ0FBQ0UsS0FBVCxDQUFOLENBQXNCc0IsZ0JBQXRCO0FBQ0QsR0FKQyxDQUFGO0FBTUFwQixFQUFBQSxFQUFFLENBQUMsMERBQUQsRUFBNkQsWUFBTTtBQUNuRWtCLGdCQUFHN0IsU0FBSCxDQUFhZ0Msc0JBQWIsQ0FBb0MsVUFBQzlCLElBQUQsRUFBT0MsSUFBUCxFQUFhQyxPQUFiLEVBQXNCQyxFQUF0QixFQUE2QjtBQUMvREEsTUFBQUEsRUFBRSxDQUFDLEtBQUQsQ0FBRjtBQUNELEtBRkQ7O0FBR0FFLElBQUFBLE9BQU8sQ0FBQ0UsS0FBUixDQUFjd0IsU0FBZDtBQUNBLDJCQUFXLHNCQUFYLEVBQW1DLEVBQW5DO0FBQ0FuQixJQUFBQSxNQUFNLENBQUNQLE9BQU8sQ0FBQ0UsS0FBVCxDQUFOLENBQXNCcUIsR0FBdEIsQ0FBMEJDLGdCQUExQjtBQUNELEdBUEMsQ0FBRjtBQVFELENBcEJPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBtYXgtcGFyYW1zICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuXG5pbXBvcnQge1xuICBnZXREZWZhdWx0UmVxdWVzdE9wdGlvbnMsXG4gIGdldFRpdGxlU2VsZWN0b3IsXG4gIGdldExpbmtTZWxlY3RvcixcbiAgZ2V0U25pcHBldFNlbGVjdG9yLFxuICBkZWZhdWx0TGltaXQsXG4gIGRlZmF1bHRTdGFydCxcbiAgZGVmYXVsdFVzZXJBZ2VudCxcbiAgdGl0bGVTZWxlY3RvcixcbiAgbGlua1NlbGVjdG9yLFxuICBzbmlwcGV0U2VsZWN0b3IsXG4gIHNhdmVUb0ZpbGUsXG59IGZyb20gJy4uL3NyYy91dGlscyc7XG5cbmdsb2JhbC5jb25zb2xlID0ge1xuICBsb2c6IGplc3QuZm4oKSxcbiAgZXJyb3I6IGplc3QuZm4oKSxcbn07XG5cbmplc3QubW9jaygnZnMnLCAoKSA9PiAoe1xuICB3cml0ZUZpbGU6IGplc3QuZm4oKHBhdGgsIGRhdGEsIG9wdGlvbnMsIGNiKSA9PiB7XG4gICAgLy8gMXN0IGFyZyBwYXNzZWQgdG8gY2FsbGJhY2sgaXMgdGhlIGVycm9yXG4gICAgY2IodHJ1ZSk7XG4gIH0pLFxufSkpO1xuXG5kZXNjcmliZSgnZ2V0RGVmYXVsdFJlcXVlc3RPcHRpb25zJywgKCkgPT4ge1xuICBpdCgndXNlcyBkZWZhdWx0IGxpbWl0LCBzdGFydCwgYW5kIHVzZXJBZ2VudCB3aGVuIG5vbmUgb2YgdGhvc2UgYXJlIHBhc3NlZCcsICgpID0+IHtcbiAgICBjb25zdCByZXF1ZXN0T3B0aW9ucyA9IGdldERlZmF1bHRSZXF1ZXN0T3B0aW9ucyh7IHF1ZXJ5OiAnZm9vJyB9KTtcbiAgICBleHBlY3QocmVxdWVzdE9wdGlvbnMpLnRvRXF1YWwoe1xuICAgICAgdXJsOiAnaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9zZWFyY2gnLFxuICAgICAgcXM6IHtcbiAgICAgICAgcTogJ2ZvbycsXG4gICAgICAgIG51bTogZGVmYXVsdExpbWl0LFxuICAgICAgICBzdGFydDogZGVmYXVsdFN0YXJ0LFxuICAgICAgfSxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ1VzZXItQWdlbnQnOiBkZWZhdWx0VXNlckFnZW50LFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ2dldFRpdGxlU2VsZWN0b3InLCAoKSA9PiB7XG4gIGl0KCd1c2VzIHRoZSBkZWZhdWx0IHZhbHVlIHdoZW4gcGFzc2VkVmFsdWUgaXMgbnVsbC91bmRlZmluZWQgYW5kIHRoZSBlbnYgdmFyIGRvZXMgbm90IGV4aXN0JywgKCkgPT4ge1xuICAgIGV4cGVjdChnZXRUaXRsZVNlbGVjdG9yKCkpLnRvQmUodGl0bGVTZWxlY3Rvcik7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdnZXRMaW5rU2VsZWN0b3InLCAoKSA9PiB7XG4gIGl0KCd1c2VzIHRoZSBkZWZhdWx0IHZhbHVlIHdoZW4gcGFzc2VkVmFsdWUgaXMgbnVsbC91bmRlZmluZWQgYW5kIHRoZSBlbnYgdmFyIGRvZXMgbm90IGV4aXN0JywgKCkgPT4ge1xuICAgIGV4cGVjdChnZXRMaW5rU2VsZWN0b3IoKSkudG9CZShsaW5rU2VsZWN0b3IpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnZ2V0U25pcHBldFNlbGVjdG9yJywgKCkgPT4ge1xuICBpdCgndXNlcyB0aGUgZGVmYXVsdCB2YWx1ZSB3aGVuIHBhc3NlZFZhbHVlIGlzIG51bGwvdW5kZWZpbmVkIGFuZCB0aGUgZW52IHZhciBkb2VzIG5vdCBleGlzdCcsICgpID0+IHtcbiAgICBleHBlY3QoZ2V0U25pcHBldFNlbGVjdG9yKCkpLnRvQmUoc25pcHBldFNlbGVjdG9yKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ3NhdmVUb0ZpbGUnLCAoKSA9PiB7XG4gIGl0KCdkb2VzIG5vdCBjYWxsIGZzLndyaXRlRmlsZSB3aGVuIG91dHB1dCAoMXN0IGFyZykgaXMgdW5kZWZpbmVkJywgKCkgPT4ge1xuICAgIHNhdmVUb0ZpbGUoKTtcbiAgICBleHBlY3QoZnMud3JpdGVGaWxlKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICB9KTtcblxuICBpdCgnY2FsbHMgZnMud3JpdGVGaWxlIHdoZW4gb3V0cHV0IGV4aXN0cywgYW5kIGNvbnNvbGUuZXJyb3Igd2hlbiBhbiBlcnJvciBvY2N1cnMnLCAoKSA9PiB7XG4gICAgc2F2ZVRvRmlsZSgnL3BhdGgvdG8vb3V0cHV0Lmpzb24nLCBbXSk7XG4gICAgZXhwZWN0KGZzLndyaXRlRmlsZSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIGV4cGVjdChjb25zb2xlLmVycm9yKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xuXG4gIGl0KCdkb2VzIG5vdCBjYWxsIGNvbnNvbGUuZXJyb3Igd2hlbiBhbiBlcnJvciBkb2VzIG5vdCBvY2N1cicsICgpID0+IHtcbiAgICBmcy53cml0ZUZpbGUubW9ja0ltcGxlbWVudGF0aW9uT25jZSgocGF0aCwgZGF0YSwgb3B0aW9ucywgY2IpID0+IHtcbiAgICAgIGNiKGZhbHNlKTtcbiAgICB9KTtcbiAgICBjb25zb2xlLmVycm9yLm1vY2tDbGVhcigpO1xuICAgIHNhdmVUb0ZpbGUoJy9wYXRoL3RvL291dHB1dC5qc29uJywgW10pO1xuICAgIGV4cGVjdChjb25zb2xlLmVycm9yKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICB9KTtcbn0pO1xuIl19