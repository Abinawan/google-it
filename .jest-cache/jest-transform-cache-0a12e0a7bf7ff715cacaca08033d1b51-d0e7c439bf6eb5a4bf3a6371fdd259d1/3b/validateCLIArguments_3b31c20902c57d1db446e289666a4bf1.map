{"version":3,"sources":["validateCLIArguments.js"],"names":["MISSING_QUERY","OUTPUT_ARG_MUST_BE_STRING","MUST_END_IN_JSON","ONLY_ONE_NOT_BOTH","getError","reason","valid","Error","validationMap","getPotentialError","args","error","query","output","endsWith","validateCLIArguments","result","module","exports"],"mappingsaAAa;AAAA;AAAA,wBAAG,eAAH,CAAnB;AACA,IAAMC,yBAAyB;AAAA;AAAA,wBAAG,2BAAH,CAA/B;AACA,IAAMC,gBAAgB;AAAA;AAAA,wBAAG,kBAAH,CAAtB;AACA,IAAMC,iBAAiB;AAAA;AAAA,wBAAG,mBAAH,CAAvB;;AAEA,SAASC,QAAT,CAAkBC,MAAlB,EAA0B;AAAA;AAAA;AAAA;AACxB,SAAO;AAAEC,IAAAA,KAAK,EAAE,KAAT;AAAgBC,IAAAA,KAAK,EAAEF;AAAvB,GAAP;AACD;;AAED,IAAMG,aAAa;AAAA;AAAA,0DAChBR,aADgB,EACAI,QAAQ,CAAC,gBAAD,CADR,yBAEhBH,yBAFgB,EAEYG,QAAQ,CAAC,gCAAD,CAFpB,yBAGhBF,gBAHgB,EAGGE,QAAQ,CAAC,mCAAD,CAHX,yBAIhBD,iBAJgB,EAIIC,QAAQ,CAAC,yDAAD,CAJZ,SAAnB;;AAOA,SAASK,iBAAT,CAA2BC,IAA3B,EAAiC;AAAA;AAAA;AAC/B,MAAIC,KAAK;AAAA;AAAA,0BAAG,IAAH,CAAT;;AAD+B;AAAA;;AAE/B,MAAI,CAACD,IAAI,CAACE,KAAV,EAAiB;AAAA;AAAA;AAAA;AACfD,IAAAA,KAAK,GAAGX,aAAR;AACD,GAFD,MAEO;AAAA;AAAA;AAAA;;AAAA;AAAI;AAAA,+BAAAU,IAAI,CAACG,MAAL;AAAA;AAAA,+BAAe,OAAOH,IAAI,CAACG,MAAZ,KAAuB,QAAtC,CAAJ,EAAoD;AAAA;AAAA;AAAA;AACzDF,MAAAA,KAAK,GAAGV,yBAAR;AACD,KAFM,MAEA;AAAA;AAAA;AAAA;;AAAA;AAAI;AAAA,iCAAAS,IAAI,CAACG,MAAL;AAAA;AAAA,iCAAe,CAACH,IAAI,CAACG,MAAL,CAAYC,QAAZ,CAAqB,OAArB,CAAhB,CAAJ,EAAmD;AAAA;AAAA;AAAA;AACxDH,QAAAA,KAAK,GAAGT,gBAAR;AACD,OAFM,MAEA;AAAA;AAAA;AAAA;;AAAA;AAAI;AAAA,mCAAAQ,IAAI,CAAC,YAAD,CAAJ;AAAA;AAAA,mCAAsB,CAACA,IAAI,CAACG,MAA5B,CAAJ,EAAwC;AAAA;AAAA;AAAA;AAC7CF,UAAAA,KAAK,GAAGR,iBAAR;AACD,SAFM;AAAA;AAAA;AAAA;AAAA;AAEN;AAAA;AAAA;;AAV8B;AAAA;AAW/B,SAAOK,aAAa,CAACG,KAAD,CAApB;AACD;;AAED,SAASI,oBAAT,CAA8BL,IAA9B,EAAoC;AAAA;AAAA;AAClC,MAAMM,MAAM;AAAA;AAAA,2BAAG;AAAEV,IAAAA,KAAK,EAAE;AAAT,GAAH,CAAZ;AACA,MAAMK,KAAK;AAAA;AAAA,2BAAGF,iBAAiB,CAACC,IAAD,CAApB,CAAX;;AAFkC;AAAA;AAGlC,SAAO;AAAA;AAAA,+BAAAC,KAAK;AAAA;AAAA,+BAAIK,MAAJ;AAAZ;AACD;;;;AAEDC,MAAM,CAACC,OAAP,GAAiBH,oBAAjB","sourcesContent":["const MISSING_QUERY = 'missing_query';\nconst OUTPUT_ARG_MUST_BE_STRING = 'output_arg_must_be_string';\nconst MUST_END_IN_JSON = 'must_end_in_json';\nconst ONLY_ONE_NOT_BOTH = 'only_one_not_both';\n\nfunction getError(reason) {\n  return { valid: false, Error: reason };\n}\n\nconst validationMap = {\n  [MISSING_QUERY]: getError('Missing querry'),\n  [OUTPUT_ARG_MUST_BE_STRING]: getError('Output argument must be string'),\n  [MUST_END_IN_JSON]: getError('Output argument must end in .json'),\n  [ONLY_ONE_NOT_BOTH]: getError('Can only use --no-display when --output is used as well'),\n};\n\nfunction getPotentialError(args) {\n  let error = null;\n  if (!args.query) {\n    error = MISSING_QUERY;\n  } else if (args.output && typeof args.output !== 'string') {\n    error = OUTPUT_ARG_MUST_BE_STRING;\n  } else if (args.output && !args.output.endsWith('.json')) {\n    error = MUST_END_IN_JSON;\n  } else if (args['no-display'] && !args.output) {\n    error = ONLY_ONE_NOT_BOTH;\n  }\n  return validationMap[error];\n}\n\nfunction validateCLIArguments(args) {\n  const result = { valid: true };\n  const error = getPotentialError(args);\n  return error || result;\n}\n\nmodule.exports = validateCLIArguments;\n"]}