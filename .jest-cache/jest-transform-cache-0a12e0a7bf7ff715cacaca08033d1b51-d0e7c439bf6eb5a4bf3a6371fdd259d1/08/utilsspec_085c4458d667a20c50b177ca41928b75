0b76bfeb338dd2e3dc5d6fb1f12af968
"use strict";

jest.mock('fs');

var _fs = _interopRequireDefault(require("fs"));

var _utils = require("../src/utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

global.console = {
  log: jest.fn(),
  err: jest.fn()
};
describe('getDefaultRequestOptions', function () {
  it('uses default limit, start, and userAgent when none of those are passed', function () {
    var requestOptions = (0, _utils.getDefaultRequestOptions)({
      query: 'foo'
    });
    expect(requestOptions).toEqual({
      url: 'https://www.google.com/search',
      qs: {
        q: 'foo',
        num: _utils.defaultLimit,
        start: _utils.defaultStart
      },
      headers: {
        'User-Agent': _utils.defaultUserAgent
      }
    });
  });
});
describe('getTitleSelector', function () {
  it('uses the default value when passedValue is null/undefined and the env var does not exist', function () {
    expect((0, _utils.getTitleSelector)()).toBe(_utils.titleSelector);
  });
});
describe('getLinkSelector', function () {
  it('uses the default value when passedValue is null/undefined and the env var does not exist', function () {
    expect((0, _utils.getLinkSelector)()).toBe(_utils.linkSelector);
  });
});
describe('getSnippetSelector', function () {
  it('uses the default value when passedValue is null/undefined and the env var does not exist', function () {
    expect((0, _utils.getSnippetSelector)()).toBe(_utils.snippetSelector);
  });
});
describe('saveToFile', function () {
  it('does not call fs.writeFile when output (1st arg) is undefined', function () {
    (0, _utils.saveToFile)();
    expect(_fs.default.writeFile).not.toHaveBeenCalled();
  });
  it('calls fs.writeFile when output exists', function () {
    (0, _utils.saveToFile)('/path/to/output.json');
    expect(_fs.default.writeFile).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzLnNwZWMuanMiXSwibmFtZXMiOlsiamVzdCIsIm1vY2siLCJnbG9iYWwiLCJjb25zb2xlIiwibG9nIiwiZm4iLCJlcnIiLCJkZXNjcmliZSIsIml0IiwicmVxdWVzdE9wdGlvbnMiLCJxdWVyeSIsImV4cGVjdCIsInRvRXF1YWwiLCJ1cmwiLCJxcyIsInEiLCJudW0iLCJkZWZhdWx0TGltaXQiLCJzdGFydCIsImRlZmF1bHRTdGFydCIsImhlYWRlcnMiLCJkZWZhdWx0VXNlckFnZW50IiwidG9CZSIsInRpdGxlU2VsZWN0b3IiLCJsaW5rU2VsZWN0b3IiLCJzbmlwcGV0U2VsZWN0b3IiLCJmcyIsIndyaXRlRmlsZSIsIm5vdCIsInRvSGF2ZUJlZW5DYWxsZWQiXSwibWFwcGluZ3MiOiI7O0FBcUJBQSxJQUFJLENBQUNDLElBQUwsQ0FBVSxJQUFWOztBQXJCQTs7QUFFQTs7OztBQWNBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZkMsRUFBQUEsR0FBRyxFQUFFSixJQUFJLENBQUNLLEVBQUwsRUFEVTtBQUVmQyxFQUFBQSxHQUFHLEVBQUVOLElBQUksQ0FBQ0ssRUFBTDtBQUZVLENBQWpCO0FBT0FFLFFBQVEsQ0FBQywwQkFBRCxFQUE2QixZQUFNO0FBQ3pDQyxFQUFBQSxFQUFFLENBQUMsd0VBQUQsRUFBMkUsWUFBTTtBQUNqRixRQUFNQyxjQUFjLEdBQUcscUNBQXlCO0FBQUVDLE1BQUFBLEtBQUssRUFBRTtBQUFULEtBQXpCLENBQXZCO0FBQ0FDLElBQUFBLE1BQU0sQ0FBQ0YsY0FBRCxDQUFOLENBQXVCRyxPQUF2QixDQUErQjtBQUM3QkMsTUFBQUEsR0FBRyxFQUFFLCtCQUR3QjtBQUU3QkMsTUFBQUEsRUFBRSxFQUFFO0FBQ0ZDLFFBQUFBLENBQUMsRUFBRSxLQUREO0FBRUZDLFFBQUFBLEdBQUcsRUFBRUMsbUJBRkg7QUFHRkMsUUFBQUEsS0FBSyxFQUFFQztBQUhMLE9BRnlCO0FBTzdCQyxNQUFBQSxPQUFPLEVBQUU7QUFDUCxzQkFBY0M7QUFEUDtBQVBvQixLQUEvQjtBQVdELEdBYkMsQ0FBRjtBQWNELENBZk8sQ0FBUjtBQWlCQWQsUUFBUSxDQUFDLGtCQUFELEVBQXFCLFlBQU07QUFDakNDLEVBQUFBLEVBQUUsQ0FBQywwRkFBRCxFQUE2RixZQUFNO0FBQ25HRyxJQUFBQSxNQUFNLENBQUMsOEJBQUQsQ0FBTixDQUEyQlcsSUFBM0IsQ0FBZ0NDLG9CQUFoQztBQUNELEdBRkMsQ0FBRjtBQUdELENBSk8sQ0FBUjtBQU1BaEIsUUFBUSxDQUFDLGlCQUFELEVBQW9CLFlBQU07QUFDaENDLEVBQUFBLEVBQUUsQ0FBQywwRkFBRCxFQUE2RixZQUFNO0FBQ25HRyxJQUFBQSxNQUFNLENBQUMsNkJBQUQsQ0FBTixDQUEwQlcsSUFBMUIsQ0FBK0JFLG1CQUEvQjtBQUNELEdBRkMsQ0FBRjtBQUdELENBSk8sQ0FBUjtBQU1BakIsUUFBUSxDQUFDLG9CQUFELEVBQXVCLFlBQU07QUFDbkNDLEVBQUFBLEVBQUUsQ0FBQywwRkFBRCxFQUE2RixZQUFNO0FBQ25HRyxJQUFBQSxNQUFNLENBQUMsZ0NBQUQsQ0FBTixDQUE2QlcsSUFBN0IsQ0FBa0NHLHNCQUFsQztBQUNELEdBRkMsQ0FBRjtBQUdELENBSk8sQ0FBUjtBQU1BbEIsUUFBUSxDQUFDLFlBQUQsRUFBZSxZQUFNO0FBQzNCQyxFQUFBQSxFQUFFLENBQUMsK0RBQUQsRUFBa0UsWUFBTTtBQUN4RTtBQUNBRyxJQUFBQSxNQUFNLENBQUNlLFlBQUdDLFNBQUosQ0FBTixDQUFxQkMsR0FBckIsQ0FBeUJDLGdCQUF6QjtBQUNELEdBSEMsQ0FBRjtBQUtBckIsRUFBQUEsRUFBRSxDQUFDLHVDQUFELEVBQTBDLFlBQU07QUFDaEQsMkJBQVcsc0JBQVg7QUFDQUcsSUFBQUEsTUFBTSxDQUFDZSxZQUFHQyxTQUFKLENBQU4sQ0FBcUJFLGdCQUFyQjtBQUNELEdBSEMsQ0FBRjtBQUlELENBVk8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyBmcm9tICdmcyc7XG5cbmltcG9ydCB7XG4gIGdldERlZmF1bHRSZXF1ZXN0T3B0aW9ucyxcbiAgZ2V0VGl0bGVTZWxlY3RvcixcbiAgZ2V0TGlua1NlbGVjdG9yLFxuICBnZXRTbmlwcGV0U2VsZWN0b3IsXG4gIGRlZmF1bHRMaW1pdCxcbiAgZGVmYXVsdFN0YXJ0LFxuICBkZWZhdWx0VXNlckFnZW50LFxuICB0aXRsZVNlbGVjdG9yLFxuICBsaW5rU2VsZWN0b3IsXG4gIHNuaXBwZXRTZWxlY3RvcixcbiAgc2F2ZVRvRmlsZSxcbn0gZnJvbSAnLi4vc3JjL3V0aWxzJztcblxuZ2xvYmFsLmNvbnNvbGUgPSB7XG4gIGxvZzogamVzdC5mbigpLFxuICBlcnI6IGplc3QuZm4oKSxcbn07XG5cbmplc3QubW9jaygnZnMnKTtcblxuZGVzY3JpYmUoJ2dldERlZmF1bHRSZXF1ZXN0T3B0aW9ucycsICgpID0+IHtcbiAgaXQoJ3VzZXMgZGVmYXVsdCBsaW1pdCwgc3RhcnQsIGFuZCB1c2VyQWdlbnQgd2hlbiBub25lIG9mIHRob3NlIGFyZSBwYXNzZWQnLCAoKSA9PiB7XG4gICAgY29uc3QgcmVxdWVzdE9wdGlvbnMgPSBnZXREZWZhdWx0UmVxdWVzdE9wdGlvbnMoeyBxdWVyeTogJ2ZvbycgfSk7XG4gICAgZXhwZWN0KHJlcXVlc3RPcHRpb25zKS50b0VxdWFsKHtcbiAgICAgIHVybDogJ2h0dHBzOi8vd3d3Lmdvb2dsZS5jb20vc2VhcmNoJyxcbiAgICAgIHFzOiB7XG4gICAgICAgIHE6ICdmb28nLFxuICAgICAgICBudW06IGRlZmF1bHRMaW1pdCxcbiAgICAgICAgc3RhcnQ6IGRlZmF1bHRTdGFydCxcbiAgICAgIH0sXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdVc2VyLUFnZW50JzogZGVmYXVsdFVzZXJBZ2VudCxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdnZXRUaXRsZVNlbGVjdG9yJywgKCkgPT4ge1xuICBpdCgndXNlcyB0aGUgZGVmYXVsdCB2YWx1ZSB3aGVuIHBhc3NlZFZhbHVlIGlzIG51bGwvdW5kZWZpbmVkIGFuZCB0aGUgZW52IHZhciBkb2VzIG5vdCBleGlzdCcsICgpID0+IHtcbiAgICBleHBlY3QoZ2V0VGl0bGVTZWxlY3RvcigpKS50b0JlKHRpdGxlU2VsZWN0b3IpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnZ2V0TGlua1NlbGVjdG9yJywgKCkgPT4ge1xuICBpdCgndXNlcyB0aGUgZGVmYXVsdCB2YWx1ZSB3aGVuIHBhc3NlZFZhbHVlIGlzIG51bGwvdW5kZWZpbmVkIGFuZCB0aGUgZW52IHZhciBkb2VzIG5vdCBleGlzdCcsICgpID0+IHtcbiAgICBleHBlY3QoZ2V0TGlua1NlbGVjdG9yKCkpLnRvQmUobGlua1NlbGVjdG9yKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ2dldFNuaXBwZXRTZWxlY3RvcicsICgpID0+IHtcbiAgaXQoJ3VzZXMgdGhlIGRlZmF1bHQgdmFsdWUgd2hlbiBwYXNzZWRWYWx1ZSBpcyBudWxsL3VuZGVmaW5lZCBhbmQgdGhlIGVudiB2YXIgZG9lcyBub3QgZXhpc3QnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGdldFNuaXBwZXRTZWxlY3RvcigpKS50b0JlKHNuaXBwZXRTZWxlY3Rvcik7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdzYXZlVG9GaWxlJywgKCkgPT4ge1xuICBpdCgnZG9lcyBub3QgY2FsbCBmcy53cml0ZUZpbGUgd2hlbiBvdXRwdXQgKDFzdCBhcmcpIGlzIHVuZGVmaW5lZCcsICgpID0+IHtcbiAgICBzYXZlVG9GaWxlKCk7XG4gICAgZXhwZWN0KGZzLndyaXRlRmlsZSkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG5cbiAgaXQoJ2NhbGxzIGZzLndyaXRlRmlsZSB3aGVuIG91dHB1dCBleGlzdHMnLCAoKSA9PiB7XG4gICAgc2F2ZVRvRmlsZSgnL3BhdGgvdG8vb3V0cHV0Lmpzb24nKTtcbiAgICBleHBlY3QoZnMud3JpdGVGaWxlKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xufSk7XG4iXX0=