{"version":3,"sources":["utils.spec.js"],"names":["jest","mock","writeFile","fn","path","data","options","cb","global","console","log","error","describe","it","requestOptions","query","expect","toEqual","url","qs","q","num","defaultLimit","start","defaultStart","headers","defaultUserAgent","toBe","titleSelector","linkSelector","snippetSelector","not","toHaveBeenCalled","fs","mockImplementationOnce","mockClear"],"mappings":";;AAyBAA,IAAI,CAACC,IAAL,CAAU,IAAV,EAAgB;AAAA,SAAO;AACrBC,IAAAA,SAAS,EAAEF,IAAI,CAACG,EAAL,CAAQ,UAACC,IAAD,EAAOC,IAAP,EAAaC,OAAb,EAAsBC,EAAtB,EAA6B;AAC9C;AACAA,MAAAA,EAAE,CAAC,IAAD,CAAF;AACD,KAHU;AADU,GAAP;AAAA,CAAhB;;AAvBA;;AAEA;;;;AAJA;;AACA;AAmBAC,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,GAAG,EAAEV,IAAI,CAACG,EAAL,EADU;AAEfQ,EAAAA,KAAK,EAAEX,IAAI,CAACG,EAAL;AAFQ,CAAjB;AAYAS,QAAQ,CAAC,0BAAD,EAA6B,YAAM;AACzCC,EAAAA,EAAE,CAAC,wEAAD,EAA2E,YAAM;AACjF,QAAMC,cAAc,GAAG,qCAAyB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAzB,CAAvB;AACAC,IAAAA,MAAM,CAACF,cAAD,CAAN,CAAuBG,OAAvB,CAA+B;AAC7BC,MAAAA,GAAG,EAAE,+BADwB;AAE7BC,MAAAA,EAAE,EAAE;AACFC,QAAAA,CAAC,EAAE,KADD;AAEFC,QAAAA,GAAG,EAAEC,mBAFH;AAGFC,QAAAA,KAAK,EAAEC;AAHL,OAFyB;AAO7BC,MAAAA,OAAO,EAAE;AACP,sBAAcC;AADP;AAPoB,KAA/B;AAWD,GAbC,CAAF;AAcD,CAfO,CAAR;AAiBAd,QAAQ,CAAC,kBAAD,EAAqB,YAAM;AACjCC,EAAAA,EAAE,CAAC,0FAAD,EAA6F,YAAM;AACnGG,IAAAA,MAAM,CAAC,8BAAD,CAAN,CAA2BW,IAA3B,CAAgCC,oBAAhC;AACD,GAFC,CAAF;AAGD,CAJO,CAAR;AAMAhB,QAAQ,CAAC,iBAAD,EAAoB,YAAM;AAChCC,EAAAA,EAAE,CAAC,0FAAD,EAA6F,YAAM;AACnGG,IAAAA,MAAM,CAAC,6BAAD,CAAN,CAA0BW,IAA1B,CAA+BE,mBAA/B;AACD,GAFC,CAAF;AAGD,CAJO,CAAR;AAMAjB,QAAQ,CAAC,oBAAD,EAAuB,YAAM;AACnCC,EAAAA,EAAE,CAAC,0FAAD,EAA6F,YAAM;AACnGG,IAAAA,MAAM,CAAC,gCAAD,CAAN,CAA6BW,IAA7B,CAAkCG,sBAAlC;AACD,GAFC,CAAF;AAGD,CAJO,CAAR;AAMAlB,QAAQ,CAAC,OAAD,EAAU,YAAM;AACtBC,EAAAA,EAAE,CAAC,uDAAD,EAA0D,YAAM;AAChE,sBAAM,SAAN,EAAiB,IAAjB;AACAG,IAAAA,MAAM,CAACP,OAAO,CAACC,GAAT,CAAN,CAAoBqB,GAApB,CAAwBC,gBAAxB;AACD,GAHC,CAAF;AAKAnB,EAAAA,EAAE,CAAC,gDAAD,EAAmD,YAAM;AACzD,sBAAM,SAAN,EAAiB,KAAjB;AACAG,IAAAA,MAAM,CAACP,OAAO,CAACC,GAAT,CAAN,CAAoBsB,gBAApB;AACD,GAHC,CAAF;AAID,CAVO,CAAR;AAYApB,QAAQ,CAAC,YAAD,EAAe,YAAM;AAC3BC,EAAAA,EAAE,CAAC,+DAAD,EAAkE,YAAM;AACxE;AACAG,IAAAA,MAAM,CAACiB,YAAG/B,SAAJ,CAAN,CAAqB6B,GAArB,CAAyBC,gBAAzB;AACD,GAHC,CAAF;AAKAnB,EAAAA,EAAE,CAAC,+EAAD,EAAkF,YAAM;AACxF,2BAAW,sBAAX,EAAmC,EAAnC;AACAG,IAAAA,MAAM,CAACiB,YAAG/B,SAAJ,CAAN,CAAqB8B,gBAArB;AACAhB,IAAAA,MAAM,CAACP,OAAO,CAACE,KAAT,CAAN,CAAsBqB,gBAAtB;AACD,GAJC,CAAF;AAMAnB,EAAAA,EAAE,CAAC,0DAAD,EAA6D,YAAM;AACnEoB,gBAAG/B,SAAH,CAAagC,sBAAb,CAAoC,UAAC9B,IAAD,EAAOC,IAAP,EAAaC,OAAb,EAAsBC,EAAtB,EAA6B;AAC/DA,MAAAA,EAAE,CAAC,KAAD,CAAF;AACD,KAFD;;AAGAE,IAAAA,OAAO,CAACE,KAAR,CAAcwB,SAAd;AACA,2BAAW,sBAAX,EAAmC,EAAnC;AACAnB,IAAAA,MAAM,CAACP,OAAO,CAACE,KAAT,CAAN,CAAsBoB,GAAtB,CAA0BC,gBAA1B;AACD,GAPC,CAAF;AAQD,CApBO,CAAR;AAsBApB,QAAQ,CAAC,cAAD,EAAiB,YAAM;AAC7BC,EAAAA,EAAE,CAAC,uEAAD,EAA0E,YAAM;AAChFoB,gBAAG/B,SAAH,CAAaiC,SAAb;;AACA,6BAAa,mDAAb,EAAkE,KAAlE;AACAnB,IAAAA,MAAM,CAACiB,YAAG/B,SAAJ,CAAN,CAAqB6B,GAArB,CAAyBC,gBAAzB;AACD,GAJC,CAAF;AAMAnB,EAAAA,EAAE,CAAC,mDAAD,EAAsD,YAAM;AAC5DoB,gBAAG/B,SAAH,CAAaiC,SAAb;;AACA,6BAAa,KAAb,EAAoB,sCAApB;AACAnB,IAAAA,MAAM,CAACiB,YAAG/B,SAAJ,CAAN,CAAqB8B,gBAArB;AACD,GAJC,CAAF;AAKD,CAZO,CAAR","sourcesContent":["/* eslint-disable max-params */\n/* eslint-disable no-console */\nimport fs from 'fs';\n\nimport {\n  getDefaultRequestOptions,\n  getTitleSelector,\n  getLinkSelector,\n  getSnippetSelector,\n  defaultLimit,\n  defaultStart,\n  defaultUserAgent,\n  titleSelector,\n  linkSelector,\n  snippetSelector,\n  logIt,\n  saveToFile,\n  saveResponse,\n} from '../src/utils';\n\nglobal.console = {\n  log: jest.fn(),\n  error: jest.fn(),\n};\n\njest.mock('fs', () => ({\n  writeFile: jest.fn((path, data, options, cb) => {\n    // 1st arg passed to callback is the error\n    cb(true);\n  }),\n}));\n\ndescribe('getDefaultRequestOptions', () => {\n  it('uses default limit, start, and userAgent when none of those are passed', () => {\n    const requestOptions = getDefaultRequestOptions({ query: 'foo' });\n    expect(requestOptions).toEqual({\n      url: 'https://www.google.com/search',\n      qs: {\n        q: 'foo',\n        num: defaultLimit,\n        start: defaultStart,\n      },\n      headers: {\n        'User-Agent': defaultUserAgent,\n      },\n    });\n  });\n});\n\ndescribe('getTitleSelector', () => {\n  it('uses the default value when passedValue is null/undefined and the env var does not exist', () => {\n    expect(getTitleSelector()).toBe(titleSelector);\n  });\n});\n\ndescribe('getLinkSelector', () => {\n  it('uses the default value when passedValue is null/undefined and the env var does not exist', () => {\n    expect(getLinkSelector()).toBe(linkSelector);\n  });\n});\n\ndescribe('getSnippetSelector', () => {\n  it('uses the default value when passedValue is null/undefined and the env var does not exist', () => {\n    expect(getSnippetSelector()).toBe(snippetSelector);\n  });\n});\n\ndescribe('logIt', () => {\n  it('does not call console.log when 2nd arg passed is true', () => {\n    logIt('message', true);\n    expect(console.log).not.toHaveBeenCalled();\n  });\n\n  it('calls console.log when 2nd arg passed is false', () => {\n    logIt('message', false);\n    expect(console.log).toHaveBeenCalled();\n  });\n});\n\ndescribe('saveToFile', () => {\n  it('does not call fs.writeFile when output (1st arg) is undefined', () => {\n    saveToFile();\n    expect(fs.writeFile).not.toHaveBeenCalled();\n  });\n\n  it('calls fs.writeFile when output exists, and console.error when an error occurs', () => {\n    saveToFile('/path/to/output.json', []);\n    expect(fs.writeFile).toHaveBeenCalled();\n    expect(console.error).toHaveBeenCalled();\n  });\n\n  it('does not call console.error when an error does not occur', () => {\n    fs.writeFile.mockImplementationOnce((path, data, options, cb) => {\n      cb(false);\n    });\n    console.error.mockClear();\n    saveToFile('/path/to/output.json', []);\n    expect(console.error).not.toHaveBeenCalled();\n  });\n});\n\ndescribe('saveResponse', () => {\n  it('does not call fs.writeFile when htmlFileOutputPath (2nd arg) is falsy', () => {\n    fs.writeFile.mockClear();\n    saveResponse('random response that will not make any difference', false);\n    expect(fs.writeFile).not.toHaveBeenCalled();\n  });\n\n  it('calls fs.writeFile when htmlFileOutputPath exists', () => {\n    fs.writeFile.mockClear();\n    saveResponse('foo', '/path/to/my/meaningless/response.xml');\n    expect(fs.writeFile).toHaveBeenCalled();\n  });\n});\n"]}