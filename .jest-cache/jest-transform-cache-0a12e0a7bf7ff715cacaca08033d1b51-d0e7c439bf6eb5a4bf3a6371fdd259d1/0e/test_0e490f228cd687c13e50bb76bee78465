b5c45645b902c7ced8bc590df560b0ae
const assert = require('assert');

const googleIt = require('../src/googleIt');

const validateCLIArguments = require('../src/validateCLIArguments');

describe('Validate output file format', () => {
  describe('# -o 12345', () => {
    it('should be invalid because output must be a string value', () => {
      assert.equal(validateCLIArguments({
        query: 'i dont know',
        output: 12345
      }).valid, false);
    });
  });
  describe('# -o whatever.jsonnn', () => {
    it('should be invalid because output file must end with .json', () => {
      assert.equal(validateCLIArguments({
        query: 'blah',
        output: 'whatever.jsonnn'
      }).valid, false);
    });
  });
  describe('# -n', () => {
    it('should be invalid because --no-display can only be used with --output', () => {
      assert.equal(validateCLIArguments({
        query: 'blah',
        'no-display': true
      }).valid, false);
    });
  });
});
describe('Ensure programmatic access works', () => {
  it('Should have results that exist', done => {
    const options = {
      query: 'Statue of liberty',
      'no-display': true
    };
    googleIt(options).then(results => {
      assert.notEqual(results, null, 'Results must exist');
      done();
    }).catch(err => {
      done(err);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QuanMiXSwibmFtZXMiOlsiYXNzZXJ0IiwicmVxdWlyZSIsImdvb2dsZUl0IiwidmFsaWRhdGVDTElBcmd1bWVudHMiLCJkZXNjcmliZSIsIml0IiwiZXF1YWwiLCJxdWVyeSIsIm91dHB1dCIsInZhbGlkIiwiZG9uZSIsIm9wdGlvbnMiLCJ0aGVuIiwicmVzdWx0cyIsIm5vdEVxdWFsIiwiY2F0Y2giLCJlcnIiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLE1BQU0sR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBdEI7O0FBQ0EsTUFBTUMsUUFBUSxHQUFHRCxPQUFPLENBQUMsaUJBQUQsQ0FBeEI7O0FBQ0EsTUFBTUUsb0JBQW9CLEdBQUdGLE9BQU8sQ0FBQyw2QkFBRCxDQUFwQzs7QUFFQUcsUUFBUSxDQUFDLDZCQUFELEVBQWdDLE1BQU07QUFDNUNBLEVBQUFBLFFBQVEsQ0FBQyxZQUFELEVBQWUsTUFBTTtBQUMzQkMsSUFBQUEsRUFBRSxDQUFDLHlEQUFELEVBQTRELE1BQU07QUFDbEVMLE1BQUFBLE1BQU0sQ0FBQ00sS0FBUCxDQUNFSCxvQkFBb0IsQ0FBQztBQUFFSSxRQUFBQSxLQUFLLEVBQUUsYUFBVDtBQUF3QkMsUUFBQUEsTUFBTSxFQUFFO0FBQWhDLE9BQUQsQ0FBcEIsQ0FBOERDLEtBRGhFLEVBRUUsS0FGRjtBQUlELEtBTEMsQ0FBRjtBQU1ELEdBUE8sQ0FBUjtBQVFBTCxFQUFBQSxRQUFRLENBQUMsc0JBQUQsRUFBeUIsTUFBTTtBQUNyQ0MsSUFBQUEsRUFBRSxDQUFDLDJEQUFELEVBQThELE1BQU07QUFDcEVMLE1BQUFBLE1BQU0sQ0FBQ00sS0FBUCxDQUNFSCxvQkFBb0IsQ0FBQztBQUFFSSxRQUFBQSxLQUFLLEVBQUUsTUFBVDtBQUFpQkMsUUFBQUEsTUFBTSxFQUFFO0FBQXpCLE9BQUQsQ0FBcEIsQ0FBbUVDLEtBRHJFLEVBRUUsS0FGRjtBQUlELEtBTEMsQ0FBRjtBQU1ELEdBUE8sQ0FBUjtBQVFBTCxFQUFBQSxRQUFRLENBQUMsTUFBRCxFQUFTLE1BQU07QUFDckJDLElBQUFBLEVBQUUsQ0FBQyx1RUFBRCxFQUEwRSxNQUFNO0FBQ2hGTCxNQUFBQSxNQUFNLENBQUNNLEtBQVAsQ0FDRUgsb0JBQW9CLENBQUM7QUFBRUksUUFBQUEsS0FBSyxFQUFFLE1BQVQ7QUFBaUIsc0JBQWM7QUFBL0IsT0FBRCxDQUFwQixDQUE0REUsS0FEOUQsRUFFRSxLQUZGO0FBSUQsS0FMQyxDQUFGO0FBTUQsR0FQTyxDQUFSO0FBUUQsQ0F6Qk8sQ0FBUjtBQTJCQUwsUUFBUSxDQUFDLGtDQUFELEVBQXFDLE1BQU07QUFDakRDLEVBQUFBLEVBQUUsQ0FBQyxnQ0FBRCxFQUFvQ0ssSUFBRCxJQUFVO0FBQzdDLFVBQU1DLE9BQU8sR0FBRztBQUNkSixNQUFBQSxLQUFLLEVBQUUsbUJBRE87QUFFZCxvQkFBYztBQUZBLEtBQWhCO0FBSUFMLElBQUFBLFFBQVEsQ0FBQ1MsT0FBRCxDQUFSLENBQWtCQyxJQUFsQixDQUF3QkMsT0FBRCxJQUFhO0FBQ2xDYixNQUFBQSxNQUFNLENBQUNjLFFBQVAsQ0FBZ0JELE9BQWhCLEVBQXlCLElBQXpCLEVBQStCLG9CQUEvQjtBQUNBSCxNQUFBQSxJQUFJO0FBQ0wsS0FIRCxFQUdHSyxLQUhILENBR1VDLEdBQUQsSUFBUztBQUNoQk4sTUFBQUEsSUFBSSxDQUFDTSxHQUFELENBQUo7QUFDRCxLQUxEO0FBTUQsR0FYQyxDQUFGO0FBWUQsQ0FiTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG5jb25zdCBnb29nbGVJdCA9IHJlcXVpcmUoJy4uL3NyYy9nb29nbGVJdCcpO1xuY29uc3QgdmFsaWRhdGVDTElBcmd1bWVudHMgPSByZXF1aXJlKCcuLi9zcmMvdmFsaWRhdGVDTElBcmd1bWVudHMnKTtcblxuZGVzY3JpYmUoJ1ZhbGlkYXRlIG91dHB1dCBmaWxlIGZvcm1hdCcsICgpID0+IHtcbiAgZGVzY3JpYmUoJyMgLW8gMTIzNDUnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGJlY2F1c2Ugb3V0cHV0IG11c3QgYmUgYSBzdHJpbmcgdmFsdWUnLCAoKSA9PiB7XG4gICAgICBhc3NlcnQuZXF1YWwoXG4gICAgICAgIHZhbGlkYXRlQ0xJQXJndW1lbnRzKHsgcXVlcnk6ICdpIGRvbnQga25vdycsIG91dHB1dDogMTIzNDUgfSkudmFsaWQsXG4gICAgICAgIGZhbHNlXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcbiAgZGVzY3JpYmUoJyMgLW8gd2hhdGV2ZXIuanNvbm5uJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBiZWNhdXNlIG91dHB1dCBmaWxlIG11c3QgZW5kIHdpdGggLmpzb24nLCAoKSA9PiB7XG4gICAgICBhc3NlcnQuZXF1YWwoXG4gICAgICAgIHZhbGlkYXRlQ0xJQXJndW1lbnRzKHsgcXVlcnk6ICdibGFoJywgb3V0cHV0OiAnd2hhdGV2ZXIuanNvbm5uJyB9KS52YWxpZCxcbiAgICAgICAgZmFsc2VcbiAgICAgICk7XG4gICAgfSk7XG4gIH0pO1xuICBkZXNjcmliZSgnIyAtbicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgYmVjYXVzZSAtLW5vLWRpc3BsYXkgY2FuIG9ubHkgYmUgdXNlZCB3aXRoIC0tb3V0cHV0JywgKCkgPT4ge1xuICAgICAgYXNzZXJ0LmVxdWFsKFxuICAgICAgICB2YWxpZGF0ZUNMSUFyZ3VtZW50cyh7IHF1ZXJ5OiAnYmxhaCcsICduby1kaXNwbGF5JzogdHJ1ZSB9KS52YWxpZCxcbiAgICAgICAgZmFsc2VcbiAgICAgICk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdFbnN1cmUgcHJvZ3JhbW1hdGljIGFjY2VzcyB3b3JrcycsICgpID0+IHtcbiAgaXQoJ1Nob3VsZCBoYXZlIHJlc3VsdHMgdGhhdCBleGlzdCcsIChkb25lKSA9PiB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIHF1ZXJ5OiAnU3RhdHVlIG9mIGxpYmVydHknLFxuICAgICAgJ25vLWRpc3BsYXknOiB0cnVlLFxuICAgIH07XG4gICAgZ29vZ2xlSXQob3B0aW9ucykudGhlbigocmVzdWx0cykgPT4ge1xuICAgICAgYXNzZXJ0Lm5vdEVxdWFsKHJlc3VsdHMsIG51bGwsICdSZXN1bHRzIG11c3QgZXhpc3QnKTtcbiAgICAgIGRvbmUoKTtcbiAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICBkb25lKGVycik7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=