{"version":3,"sources":["test.js"],"names":["assert","require","googleIt","validateCLIArguments","describe","it","equal","query","output","valid","done","options","then","results","notEqual","catch","err"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,iBAAD,CAAxB;;AACA,MAAME,oBAAoB,GAAGF,OAAO,CAAC,6BAAD,CAApC;;AAEAG,QAAQ,CAAC,6BAAD,EAAgC,MAAM;AAC5CA,EAAAA,QAAQ,CAAC,YAAD,EAAe,MAAM;AAC3BC,IAAAA,EAAE,CAAC,yDAAD,EAA4D,MAAM;AAClEL,MAAAA,MAAM,CAACM,KAAP,CACEH,oBAAoB,CAAC;AAAEI,QAAAA,KAAK,EAAE,aAAT;AAAwBC,QAAAA,MAAM,EAAE;AAAhC,OAAD,CAApB,CAA8DC,KADhE,EAEE,KAFF;AAID,KALC,CAAF;AAMD,GAPO,CAAR;AAQAL,EAAAA,QAAQ,CAAC,sBAAD,EAAyB,MAAM;AACrCC,IAAAA,EAAE,CAAC,2DAAD,EAA8D,MAAM;AACpEL,MAAAA,MAAM,CAACM,KAAP,CACEH,oBAAoB,CAAC;AAAEI,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,MAAM,EAAE;AAAzB,OAAD,CAApB,CAAmEC,KADrE,EAEE,KAFF;AAID,KALC,CAAF;AAMD,GAPO,CAAR;AAQAL,EAAAA,QAAQ,CAAC,MAAD,EAAS,MAAM;AACrBC,IAAAA,EAAE,CAAC,uEAAD,EAA0E,MAAM;AAChFL,MAAAA,MAAM,CAACM,KAAP,CACEH,oBAAoB,CAAC;AAAEI,QAAAA,KAAK,EAAE,MAAT;AAAiB,sBAAc;AAA/B,OAAD,CAApB,CAA4DE,KAD9D,EAEE,KAFF;AAID,KALC,CAAF;AAMD,GAPO,CAAR;AAQD,CAzBO,CAAR;AA2BAL,QAAQ,CAAC,kCAAD,EAAqC,MAAM;AACjDC,EAAAA,EAAE,CAAC,gCAAD,EAAoCK,IAAD,IAAU;AAC7C,UAAMC,OAAO,GAAG;AACdJ,MAAAA,KAAK,EAAE,mBADO;AAEd,oBAAc;AAFA,KAAhB;AAIAL,IAAAA,QAAQ,CAACS,OAAD,CAAR,CAAkBC,IAAlB,CAAwBC,OAAD,IAAa;AAClCb,MAAAA,MAAM,CAACc,QAAP,CAAgBD,OAAhB,EAAyB,IAAzB,EAA+B,oBAA/B;AACAH,MAAAA,IAAI;AACL,KAHD,EAGGK,KAHH,CAGUC,GAAD,IAAS;AAChBN,MAAAA,IAAI,CAACM,GAAD,CAAJ;AACD,KALD;AAMD,GAXC,CAAF;AAYD,CAbO,CAAR","sourcesContent":["const assert = require('assert');\nconst googleIt = require('../src/googleIt');\nconst validateCLIArguments = require('../src/validateCLIArguments');\n\ndescribe('Validate output file format', () => {\n  describe('# -o 12345', () => {\n    it('should be invalid because output must be a string value', () => {\n      assert.equal(\n        validateCLIArguments({ query: 'i dont know', output: 12345 }).valid,\n        false\n      );\n    });\n  });\n  describe('# -o whatever.jsonnn', () => {\n    it('should be invalid because output file must end with .json', () => {\n      assert.equal(\n        validateCLIArguments({ query: 'blah', output: 'whatever.jsonnn' }).valid,\n        false\n      );\n    });\n  });\n  describe('# -n', () => {\n    it('should be invalid because --no-display can only be used with --output', () => {\n      assert.equal(\n        validateCLIArguments({ query: 'blah', 'no-display': true }).valid,\n        false\n      );\n    });\n  });\n});\n\ndescribe('Ensure programmatic access works', () => {\n  it('Should have results that exist', (done) => {\n    const options = {\n      query: 'Statue of liberty',\n      'no-display': true,\n    };\n    googleIt(options).then((results) => {\n      assert.notEqual(results, null, 'Results must exist');\n      done();\n    }).catch((err) => {\n      done(err);\n    });\n  });\n});\n"]}