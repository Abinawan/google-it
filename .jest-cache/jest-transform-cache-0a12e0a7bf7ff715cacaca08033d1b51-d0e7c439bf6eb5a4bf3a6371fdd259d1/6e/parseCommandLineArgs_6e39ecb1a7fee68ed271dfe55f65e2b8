38feccf83124b841c3437fc48a179161
/* istanbul ignore next */
"use strict";

var cov_2mee1uylxt = function () {
  var path = "/Users/patneedham/Desktop/dev/tmp/google-it/src/parseCommandLineArgs.js";
  var hash = "01059e95cc7f9cb49476906322f4a9ee8d01884e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/patneedham/Desktop/dev/tmp/google-it/src/parseCommandLineArgs.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 24
        },
        end: {
          line: 1,
          column: 52
        }
      },
      "1": {
        start: {
          line: 2,
          column: 26
        },
        end: {
          line: 2,
          column: 56
        }
      },
      "2": {
        start: {
          line: 4,
          column: 29
        },
        end: {
          line: 13,
          column: 1
        }
      },
      "3": {
        start: {
          line: 5,
          column: 21
        },
        end: {
          line: 6,
          column: 40
        }
      },
      "4": {
        start: {
          line: 8,
          column: 2
        },
        end: {
          line: 11,
          column: 3
        }
      },
      "5": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 55
        }
      },
      "6": {
        start: {
          line: 12,
          column: 2
        },
        end: {
          line: 12,
          column: 20
        }
      },
      "7": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 15,
          column: 38
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 4,
            column: 29
          },
          end: {
            line: 4,
            column: 30
          }
        },
        loc: {
          start: {
            line: 4,
            column: 39
          },
          end: {
            line: 13,
            column: 1
          }
        },
        line: 4
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 5,
            column: 21
          },
          end: {
            line: 6,
            column: 40
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 41
          },
          end: {
            line: 5,
            column: 59
          }
        }, {
          start: {
            line: 6,
            column: 6
          },
          end: {
            line: 6,
            column: 40
          }
        }],
        line: 5
      },
      "1": {
        loc: {
          start: {
            line: 8,
            column: 2
          },
          end: {
            line: 11,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 8,
            column: 2
          },
          end: {
            line: 11,
            column: 3
          }
        }, {
          start: {
            line: 8,
            column: 2
          },
          end: {
            line: 11,
            column: 3
          }
        }],
        line: 8
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "43e27e138ebf9cfc5966b082cf9a028302ed4184",
    hash: "01059e95cc7f9cb49476906322f4a9ee8d01884e"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  return coverage[path] = coverageData;
}();

var commandLineArgs =
/* istanbul ignore next */
(cov_2mee1uylxt.s[0]++, require('command-line-args'));
var optionDefinitions =
/* istanbul ignore next */
(cov_2mee1uylxt.s[1]++, require('./optionDefinitions'));

/* istanbul ignore next */
cov_2mee1uylxt.s[2]++;

var parseCommandLineArgs = function parseCommandLineArgs(argv) {
  /* istanbul ignore next */
  cov_2mee1uylxt.f[0]++;
  var cliOptions =
  /* istanbul ignore next */
  (cov_2mee1uylxt.s[3]++, argv.length === 3 ?
  /* istanbul ignore next */
  (cov_2mee1uylxt.b[0][0]++, {
    query: argv[2]
  }) :
  /* istanbul ignore next */
  (cov_2mee1uylxt.b[0][1]++, commandLineArgs(optionDefinitions))); // first arg is 'node', second is /path/to/file/app.js, third is whatever follows afterward

  /* istanbul ignore next */
  cov_2mee1uylxt.s[4]++;

  if (argv.length > 2) {
    /* istanbul ignore next */
    cov_2mee1uylxt.b[1][0]++;
    cov_2mee1uylxt.s[5]++;
    // eslint-disable-next-line prefer-destructuring
    cliOptions.query = argv[2].replace('--query=', '');
  } else
  /* istanbul ignore next */
  {
    cov_2mee1uylxt.b[1][1]++;
  }

  cov_2mee1uylxt.s[6]++;
  return cliOptions;
};

/* istanbul ignore next */
cov_2mee1uylxt.s[7]++;
module.exports = parseCommandLineArgs;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhcnNlQ29tbWFuZExpbmVBcmdzLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRMaW5lQXJncyIsInJlcXVpcmUiLCJvcHRpb25EZWZpbml0aW9ucyIsInBhcnNlQ29tbWFuZExpbmVBcmdzIiwiYXJndiIsImNsaU9wdGlvbnMiLCJsZW5ndGgiLCJxdWVyeSIsInJlcGxhY2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQU1BLGVBQWU7QUFBQTtBQUFBLHdCQUFHQyxPQUFPLENBQUMsbUJBQUQsQ0FBVixDQUFyQjtBQUNBLElBQU1DLGlCQUFpQjtBQUFBO0FBQUEsd0JBQUdELE9BQU8sQ0FBQyxxQkFBRCxDQUFWLENBQXZCOzs7OztBQUVBLElBQU1FLG9CQUFvQixHQUFHLFNBQXZCQSxvQkFBdUIsQ0FBQ0MsSUFBRCxFQUFVO0FBQUE7QUFBQTtBQUNyQyxNQUFNQyxVQUFVO0FBQUE7QUFBQSwwQkFBR0QsSUFBSSxDQUFDRSxNQUFMLEtBQWdCLENBQWhCO0FBQUE7QUFBQSw2QkFBb0I7QUFBRUMsSUFBQUEsS0FBSyxFQUFFSCxJQUFJLENBQUMsQ0FBRDtBQUFiLEdBQXBCO0FBQUE7QUFBQSw2QkFDZkosZUFBZSxDQUFDRSxpQkFBRCxDQURBLENBQUgsQ0FBaEIsQ0FEcUMsQ0FHckM7O0FBSHFDO0FBQUE7O0FBSXJDLE1BQUlFLElBQUksQ0FBQ0UsTUFBTCxHQUFjLENBQWxCLEVBQXFCO0FBQUE7QUFBQTtBQUFBO0FBQ25CO0FBQ0FELElBQUFBLFVBQVUsQ0FBQ0UsS0FBWCxHQUFtQkgsSUFBSSxDQUFDLENBQUQsQ0FBSixDQUFRSSxPQUFSLENBQWdCLFVBQWhCLEVBQTRCLEVBQTVCLENBQW5CO0FBQ0QsR0FIRDtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUpxQztBQVFyQyxTQUFPSCxVQUFQO0FBQ0QsQ0FURDs7OztBQVdBSSxNQUFNLENBQUNDLE9BQVAsR0FBaUJQLG9CQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNvbW1hbmRMaW5lQXJncyA9IHJlcXVpcmUoJ2NvbW1hbmQtbGluZS1hcmdzJyk7XG5jb25zdCBvcHRpb25EZWZpbml0aW9ucyA9IHJlcXVpcmUoJy4vb3B0aW9uRGVmaW5pdGlvbnMnKTtcblxuY29uc3QgcGFyc2VDb21tYW5kTGluZUFyZ3MgPSAoYXJndikgPT4ge1xuICBjb25zdCBjbGlPcHRpb25zID0gYXJndi5sZW5ndGggPT09IDMgPyB7IHF1ZXJ5OiBhcmd2WzJdIH1cbiAgICA6IGNvbW1hbmRMaW5lQXJncyhvcHRpb25EZWZpbml0aW9ucyk7XG4gIC8vIGZpcnN0IGFyZyBpcyAnbm9kZScsIHNlY29uZCBpcyAvcGF0aC90by9maWxlL2FwcC5qcywgdGhpcmQgaXMgd2hhdGV2ZXIgZm9sbG93cyBhZnRlcndhcmRcbiAgaWYgKGFyZ3YubGVuZ3RoID4gMikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgIGNsaU9wdGlvbnMucXVlcnkgPSBhcmd2WzJdLnJlcGxhY2UoJy0tcXVlcnk9JywgJycpO1xuICB9XG4gIHJldHVybiBjbGlPcHRpb25zO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJzZUNvbW1hbmRMaW5lQXJncztcbiJdfQ==