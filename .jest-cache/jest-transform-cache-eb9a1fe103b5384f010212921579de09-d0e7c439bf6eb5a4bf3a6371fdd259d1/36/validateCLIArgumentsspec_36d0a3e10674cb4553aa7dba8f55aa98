060d9b166f4e72a0b42bffe6dd2097fd
"use strict";

var _validateCLIArguments = _interopRequireDefault(require("../src/validateCLIArguments"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Validate output file format', function () {
  describe('# -o 12345', function () {
    it('should be invalid because output must be a string value', function () {
      var result = (0, _validateCLIArguments.default)({
        query: 'i dont know',
        output: 12345
      });
      expect(result.valid).toBe(false);
    });
  });
  describe('# -o whatever.jsonnn', function () {
    it('should be invalid because output file must end with .json', function () {
      var result = (0, _validateCLIArguments.default)({
        query: 'blah',
        output: 'whatever.jsonnn'
      });
      expect(result.valid).toBe(false);
    });
  });
  describe('# -n', function () {
    it('should be invalid because --no-display can only be used with --output', function () {
      var result = (0, _validateCLIArguments.default)({
        query: 'blah',
        'no-display': true
      });
      expect(result.valid).toBe(false);
    });
  });
  it('returns error as "Missing query" when query is not passed as argument', function () {
    var result = (0, _validateCLIArguments.default)({});
    expect(result.Error).toBe('Missing query');
  });
  it('returns { valid: true } when argument is formatted correctly', function () {
    var result = (0, _validateCLIArguments.default)({
      query: 'best'
    });
    expect(result.valid).toBe(true);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZhbGlkYXRlQ0xJQXJndW1lbnRzLnNwZWMuanMiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJpdCIsInJlc3VsdCIsInF1ZXJ5Iiwib3V0cHV0IiwiZXhwZWN0IiwidmFsaWQiLCJ0b0JlIiwiRXJyb3IiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7QUFFQUEsUUFBUSxDQUFDLDZCQUFELEVBQWdDLFlBQU07QUFDNUNBLEVBQUFBLFFBQVEsQ0FBQyxZQUFELEVBQWUsWUFBTTtBQUMzQkMsSUFBQUEsRUFBRSxDQUFDLHlEQUFELEVBQTRELFlBQU07QUFDbEUsVUFBTUMsTUFBTSxHQUFHLG1DQUFxQjtBQUFFQyxRQUFBQSxLQUFLLEVBQUUsYUFBVDtBQUF3QkMsUUFBQUEsTUFBTSxFQUFFO0FBQWhDLE9BQXJCLENBQWY7QUFDQUMsTUFBQUEsTUFBTSxDQUFDSCxNQUFNLENBQUNJLEtBQVIsQ0FBTixDQUFxQkMsSUFBckIsQ0FBMEIsS0FBMUI7QUFDRCxLQUhDLENBQUY7QUFJRCxHQUxPLENBQVI7QUFNQVAsRUFBQUEsUUFBUSxDQUFDLHNCQUFELEVBQXlCLFlBQU07QUFDckNDLElBQUFBLEVBQUUsQ0FBQywyREFBRCxFQUE4RCxZQUFNO0FBQ3BFLFVBQU1DLE1BQU0sR0FBRyxtQ0FBcUI7QUFBRUMsUUFBQUEsS0FBSyxFQUFFLE1BQVQ7QUFBaUJDLFFBQUFBLE1BQU0sRUFBRTtBQUF6QixPQUFyQixDQUFmO0FBQ0FDLE1BQUFBLE1BQU0sQ0FBQ0gsTUFBTSxDQUFDSSxLQUFSLENBQU4sQ0FBcUJDLElBQXJCLENBQTBCLEtBQTFCO0FBQ0QsS0FIQyxDQUFGO0FBSUQsR0FMTyxDQUFSO0FBTUFQLEVBQUFBLFFBQVEsQ0FBQyxNQUFELEVBQVMsWUFBTTtBQUNyQkMsSUFBQUEsRUFBRSxDQUFDLHVFQUFELEVBQTBFLFlBQU07QUFDaEYsVUFBTUMsTUFBTSxHQUFHLG1DQUFxQjtBQUFFQyxRQUFBQSxLQUFLLEVBQUUsTUFBVDtBQUFpQixzQkFBYztBQUEvQixPQUFyQixDQUFmO0FBQ0FFLE1BQUFBLE1BQU0sQ0FBQ0gsTUFBTSxDQUFDSSxLQUFSLENBQU4sQ0FBcUJDLElBQXJCLENBQTBCLEtBQTFCO0FBQ0QsS0FIQyxDQUFGO0FBSUQsR0FMTyxDQUFSO0FBTUFOLEVBQUFBLEVBQUUsQ0FBQyx1RUFBRCxFQUEwRSxZQUFNO0FBQ2hGLFFBQU1DLE1BQU0sR0FBRyxtQ0FBcUIsRUFBckIsQ0FBZjtBQUNBRyxJQUFBQSxNQUFNLENBQUNILE1BQU0sQ0FBQ00sS0FBUixDQUFOLENBQXFCRCxJQUFyQixDQUEwQixlQUExQjtBQUNELEdBSEMsQ0FBRjtBQUlBTixFQUFBQSxFQUFFLENBQUMsOERBQUQsRUFBaUUsWUFBTTtBQUN2RSxRQUFNQyxNQUFNLEdBQUcsbUNBQXFCO0FBQUVDLE1BQUFBLEtBQUssRUFBRTtBQUFULEtBQXJCLENBQWY7QUFDQUUsSUFBQUEsTUFBTSxDQUFDSCxNQUFNLENBQUNJLEtBQVIsQ0FBTixDQUFxQkMsSUFBckIsQ0FBMEIsSUFBMUI7QUFDRCxHQUhDLENBQUY7QUFJRCxDQTNCTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHZhbGlkYXRlQ0xJQXJndW1lbnRzIGZyb20gJy4uL3NyYy92YWxpZGF0ZUNMSUFyZ3VtZW50cyc7XG5cbmRlc2NyaWJlKCdWYWxpZGF0ZSBvdXRwdXQgZmlsZSBmb3JtYXQnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCcjIC1vIDEyMzQ1JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBiZWNhdXNlIG91dHB1dCBtdXN0IGJlIGEgc3RyaW5nIHZhbHVlJywgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gdmFsaWRhdGVDTElBcmd1bWVudHMoeyBxdWVyeTogJ2kgZG9udCBrbm93Jywgb3V0cHV0OiAxMjM0NSB9KTtcbiAgICAgIGV4cGVjdChyZXN1bHQudmFsaWQpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuICB9KTtcbiAgZGVzY3JpYmUoJyMgLW8gd2hhdGV2ZXIuanNvbm5uJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBiZWNhdXNlIG91dHB1dCBmaWxlIG11c3QgZW5kIHdpdGggLmpzb24nLCAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSB2YWxpZGF0ZUNMSUFyZ3VtZW50cyh7IHF1ZXJ5OiAnYmxhaCcsIG91dHB1dDogJ3doYXRldmVyLmpzb25ubicgfSk7XG4gICAgICBleHBlY3QocmVzdWx0LnZhbGlkKS50b0JlKGZhbHNlKTtcbiAgICB9KTtcbiAgfSk7XG4gIGRlc2NyaWJlKCcjIC1uJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBiZWNhdXNlIC0tbm8tZGlzcGxheSBjYW4gb25seSBiZSB1c2VkIHdpdGggLS1vdXRwdXQnLCAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSB2YWxpZGF0ZUNMSUFyZ3VtZW50cyh7IHF1ZXJ5OiAnYmxhaCcsICduby1kaXNwbGF5JzogdHJ1ZSB9KTtcbiAgICAgIGV4cGVjdChyZXN1bHQudmFsaWQpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuICB9KTtcbiAgaXQoJ3JldHVybnMgZXJyb3IgYXMgXCJNaXNzaW5nIHF1ZXJ5XCIgd2hlbiBxdWVyeSBpcyBub3QgcGFzc2VkIGFzIGFyZ3VtZW50JywgKCkgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IHZhbGlkYXRlQ0xJQXJndW1lbnRzKHt9KTtcbiAgICBleHBlY3QocmVzdWx0LkVycm9yKS50b0JlKCdNaXNzaW5nIHF1ZXJ5Jyk7XG4gIH0pO1xuICBpdCgncmV0dXJucyB7IHZhbGlkOiB0cnVlIH0gd2hlbiBhcmd1bWVudCBpcyBmb3JtYXR0ZWQgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IHZhbGlkYXRlQ0xJQXJndW1lbnRzKHsgcXVlcnk6ICdiZXN0JyB9KTtcbiAgICBleHBlY3QocmVzdWx0LnZhbGlkKS50b0JlKHRydWUpO1xuICB9KTtcbn0pO1xuIl19