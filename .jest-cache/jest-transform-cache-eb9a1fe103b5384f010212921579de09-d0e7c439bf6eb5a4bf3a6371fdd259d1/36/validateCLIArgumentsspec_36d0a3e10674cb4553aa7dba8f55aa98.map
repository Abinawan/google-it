{"version":3,"sources":["validateCLIArguments.spec.js"],"names":["describe","it","result","query","output","expect","valid","toBe","Error"],"mappings":";;AAAA;;;;AAEAA,QAAQ,CAAC,6BAAD,EAAgC,YAAM;AAC5CA,EAAAA,QAAQ,CAAC,YAAD,EAAe,YAAM;AAC3BC,IAAAA,EAAE,CAAC,yDAAD,EAA4D,YAAM;AAClE,UAAMC,MAAM,GAAG,mCAAqB;AAAEC,QAAAA,KAAK,EAAE,aAAT;AAAwBC,QAAAA,MAAM,EAAE;AAAhC,OAArB,CAAf;AACAC,MAAAA,MAAM,CAACH,MAAM,CAACI,KAAR,CAAN,CAAqBC,IAArB,CAA0B,KAA1B;AACD,KAHC,CAAF;AAID,GALO,CAAR;AAMAP,EAAAA,QAAQ,CAAC,sBAAD,EAAyB,YAAM;AACrCC,IAAAA,EAAE,CAAC,2DAAD,EAA8D,YAAM;AACpE,UAAMC,MAAM,GAAG,mCAAqB;AAAEC,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,MAAM,EAAE;AAAzB,OAArB,CAAf;AACAC,MAAAA,MAAM,CAACH,MAAM,CAACI,KAAR,CAAN,CAAqBC,IAArB,CAA0B,KAA1B;AACD,KAHC,CAAF;AAID,GALO,CAAR;AAMAP,EAAAA,QAAQ,CAAC,MAAD,EAAS,YAAM;AACrBC,IAAAA,EAAE,CAAC,uEAAD,EAA0E,YAAM;AAChF,UAAMC,MAAM,GAAG,mCAAqB;AAAEC,QAAAA,KAAK,EAAE,MAAT;AAAiB,sBAAc;AAA/B,OAArB,CAAf;AACAE,MAAAA,MAAM,CAACH,MAAM,CAACI,KAAR,CAAN,CAAqBC,IAArB,CAA0B,KAA1B;AACD,KAHC,CAAF;AAID,GALO,CAAR;AAMAN,EAAAA,EAAE,CAAC,uEAAD,EAA0E,YAAM;AAChF,QAAMC,MAAM,GAAG,mCAAqB,EAArB,CAAf;AACAG,IAAAA,MAAM,CAACH,MAAM,CAACM,KAAR,CAAN,CAAqBD,IAArB,CAA0B,eAA1B;AACD,GAHC,CAAF;AAIAN,EAAAA,EAAE,CAAC,8DAAD,EAAiE,YAAM;AACvE,QAAMC,MAAM,GAAG,mCAAqB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAArB,CAAf;AACAE,IAAAA,MAAM,CAACH,MAAM,CAACI,KAAR,CAAN,CAAqBC,IAArB,CAA0B,IAA1B;AACD,GAHC,CAAF;AAID,CA3BO,CAAR","sourcesContent":["import validateCLIArguments from '../src/validateCLIArguments';\n\ndescribe('Validate output file format', () => {\n  describe('# -o 12345', () => {\n    it('should be invalid because output must be a string value', () => {\n      const result = validateCLIArguments({ query: 'i dont know', output: 12345 });\n      expect(result.valid).toBe(false);\n    });\n  });\n  describe('# -o whatever.jsonnn', () => {\n    it('should be invalid because output file must end with .json', () => {\n      const result = validateCLIArguments({ query: 'blah', output: 'whatever.jsonnn' });\n      expect(result.valid).toBe(false);\n    });\n  });\n  describe('# -n', () => {\n    it('should be invalid because --no-display can only be used with --output', () => {\n      const result = validateCLIArguments({ query: 'blah', 'no-display': true });\n      expect(result.valid).toBe(false);\n    });\n  });\n  it('returns error as \"Missing query\" when query is not passed as argument', () => {\n    const result = validateCLIArguments({});\n    expect(result.Error).toBe('Missing query');\n  });\n  it('returns { valid: true } when argument is formatted correctly', () => {\n    const result = validateCLIArguments({ query: 'best' });\n    expect(result.valid).toBe(true);\n  });\n});\n"]}