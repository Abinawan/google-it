5ed042191caade40bf60b128b120dc16
"use strict";

jest.mock('child_process', function () {
  return {
    exec: jest.fn(function () {})
  };
});
jest.mock('../src/utils', function () {
  return _objectSpread({}, jest.requireActual('../src/utils'), {
    logIt: jest.fn(function () {})
  });
});

var _child_process = require("child_process");

var _googleIt = require("../src/googleIt");

var _utils = require("../src/utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

global.console = {
  log: jest.fn()
};
describe('errorTryingToOpen', function () {
  it('does not call console.log when error is falsy', function () {
    console.log.mockClear();
    (0, _googleIt.errorTryingToOpen)(false);
    expect(console.log).not.toHaveBeenCalled();
  });
  it('calls console.log 3 times when error is true', function () {
    console.log.mockClear();
    (0, _googleIt.errorTryingToOpen)('something really bad', 'stdout', 'stderr');
    expect(console.log).toHaveBeenCalledTimes(3);
  });
});
describe('openInBrowser', function () {
  it('does not call exec when "open" is undefined', function () {
    _child_process.exec.mockClear();

    (0, _googleIt.openInBrowser)(undefined);
    expect(_child_process.exec).not.toHaveBeenCalled();
  });
  it('calls exec results.slice(0, open).length times when "open" is > 0', function () {
    _child_process.exec.mockClear();

    (0, _googleIt.openInBrowser)(3, [{
      link: ''
    }, {
      link: ''
    }, {
      link: ''
    }]);
    expect(_child_process.exec).toHaveBeenCalledTimes(3);
  });
});
describe('getSnippet', function () {
  it('maps over elem.children and data field, joined by empty string', function () {
    var result = (0, _googleIt.getSnippet)({
      children: [{
        data: '1'
      }, {
        data: '2'
      }, {
        data: '3'
      }]
    });
    expect(result).toBe('123');
  });
  it('returns child.children.map(c => c.data) when child.data does not exist', function () {
    var result = (0, _googleIt.getSnippet)({
      children: [{
        children: [{
          data: '1'
        }]
      }, {
        children: [{
          data: '2'
        }]
      }, {
        children: [{
          data: '3'
        }]
      }]
    });
    expect(result).toBe('123');
  });
});
describe('display', function () {
  it('calls logIt once for each result (+ once for newline) when 3rd arg (onlyUrls) is true', function () {
    _utils.logIt.mockClear();

    (0, _googleIt.display)([{
      link: 'a'
    }, {
      link: 'b'
    }], false, true);
    expect(_utils.logIt).toHaveBeenCalledTimes(3);
  });
  it('calls logIt 4 times for each result (+ once for newline) when 3rd arg is false', function () {
    _utils.logIt.mockClear();

    (0, _googleIt.display)([{
      title: 'a',
      link: 'a',
      snippet: 'a'
    }, {
      title: 'b',
      link: 'b',
      snippet: 'b'
    }], false, false);
    expect(_utils.logIt).toHaveBeenCalledTimes(9);
  });
  it('calls logIt once for each result (+ once for newline) when 3rd arg (onlyUrls) is false but title is missing', function () {
    _utils.logIt.mockClear();

    (0, _googleIt.display)([{
      link: 'a',
      snippet: 'a'
    }, {
      link: 'b',
      snippet: 'b'
    }], false, false);
    expect(_utils.logIt).toHaveBeenCalledTimes(3);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,