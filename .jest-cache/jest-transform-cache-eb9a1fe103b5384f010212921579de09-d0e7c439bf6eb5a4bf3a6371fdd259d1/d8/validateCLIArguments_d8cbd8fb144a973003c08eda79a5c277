1d0a8ecd61df30fcfb1d00ba221fadd2
/* istanbul ignore next */
"use strict";

var cov_1r8yxqoh8x = function () {
  var path = "/Users/patneedham/Desktop/dev/tmp/google-it/src/validateCLIArguments.js";
  var hash = "95923745192ab2a91600c97b2df764bed8f97002";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/patneedham/Desktop/dev/tmp/google-it/src/validateCLIArguments.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 22
        },
        end: {
          line: 1,
          column: 37
        }
      },
      "1": {
        start: {
          line: 2,
          column: 34
        },
        end: {
          line: 2,
          column: 61
        }
      },
      "2": {
        start: {
          line: 3,
          column: 25
        },
        end: {
          line: 3,
          column: 43
        }
      },
      "3": {
        start: {
          line: 4,
          column: 26
        },
        end: {
          line: 4,
          column: 45
        }
      },
      "4": {
        start: {
          line: 7,
          column: 2
        },
        end: {
          line: 7,
          column: 41
        }
      },
      "5": {
        start: {
          line: 10,
          column: 22
        },
        end: {
          line: 15,
          column: 1
        }
      },
      "6": {
        start: {
          line: 18,
          column: 14
        },
        end: {
          line: 18,
          column: 18
        }
      },
      "7": {
        start: {
          line: 19,
          column: 2
        },
        end: {
          line: 27,
          column: 3
        }
      },
      "8": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 20,
          column: 26
        }
      },
      "9": {
        start: {
          line: 21,
          column: 9
        },
        end: {
          line: 27,
          column: 3
        }
      },
      "10": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "11": {
        start: {
          line: 23,
          column: 9
        },
        end: {
          line: 27,
          column: 3
        }
      },
      "12": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 24,
          column: 29
        }
      },
      "13": {
        start: {
          line: 25,
          column: 9
        },
        end: {
          line: 27,
          column: 3
        }
      },
      "14": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 26,
          column: 30
        }
      },
      "15": {
        start: {
          line: 28,
          column: 2
        },
        end: {
          line: 28,
          column: 30
        }
      },
      "16": {
        start: {
          line: 32,
          column: 17
        },
        end: {
          line: 32,
          column: 32
        }
      },
      "17": {
        start: {
          line: 33,
          column: 16
        },
        end: {
          line: 33,
          column: 39
        }
      },
      "18": {
        start: {
          line: 34,
          column: 2
        },
        end: {
          line: 34,
          column: 25
        }
      },
      "19": {
        start: {
          line: 37,
          column: 0
        },
        end: {
          line: 37,
          column: 38
        }
      }
    },
    fnMap: {
      "0": {
        name: "getError",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 17
          }
        },
        loc: {
          start: {
            line: 6,
            column: 26
          },
          end: {
            line: 8,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "getPotentialError",
        decl: {
          start: {
            line: 17,
            column: 9
          },
          end: {
            line: 17,
            column: 26
          }
        },
        loc: {
          start: {
            line: 17,
            column: 33
          },
          end: {
            line: 29,
            column: 1
          }
        },
        line: 17
      },
      "2": {
        name: "validateCLIArguments",
        decl: {
          start: {
            line: 31,
            column: 9
          },
          end: {
            line: 31,
            column: 29
          }
        },
        loc: {
          start: {
            line: 31,
            column: 36
          },
          end: {
            line: 35,
            column: 1
          }
        },
        line: 31
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 19,
            column: 2
          },
          end: {
            line: 27,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 19,
            column: 2
          },
          end: {
            line: 27,
            column: 3
          }
        }, {
          start: {
            line: 19,
            column: 2
          },
          end: {
            line: 27,
            column: 3
          }
        }],
        line: 19
      },
      "1": {
        loc: {
          start: {
            line: 21,
            column: 9
          },
          end: {
            line: 27,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 9
          },
          end: {
            line: 27,
            column: 3
          }
        }, {
          start: {
            line: 21,
            column: 9
          },
          end: {
            line: 27,
            column: 3
          }
        }],
        line: 21
      },
      "2": {
        loc: {
          start: {
            line: 21,
            column: 13
          },
          end: {
            line: 21,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 21,
            column: 13
          },
          end: {
            line: 21,
            column: 24
          }
        }, {
          start: {
            line: 21,
            column: 28
          },
          end: {
            line: 21,
            column: 59
          }
        }],
        line: 21
      },
      "3": {
        loc: {
          start: {
            line: 23,
            column: 9
          },
          end: {
            line: 27,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 9
          },
          end: {
            line: 27,
            column: 3
          }
        }, {
          start: {
            line: 23,
            column: 9
          },
          end: {
            line: 27,
            column: 3
          }
        }],
        line: 23
      },
      "4": {
        loc: {
          start: {
            line: 23,
            column: 13
          },
          end: {
            line: 23,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 13
          },
          end: {
            line: 23,
            column: 24
          }
        }, {
          start: {
            line: 23,
            column: 28
          },
          end: {
            line: 23,
            column: 58
          }
        }],
        line: 23
      },
      "5": {
        loc: {
          start: {
            line: 25,
            column: 9
          },
          end: {
            line: 27,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 9
          },
          end: {
            line: 27,
            column: 3
          }
        }, {
          start: {
            line: 25,
            column: 9
          },
          end: {
            line: 27,
            column: 3
          }
        }],
        line: 25
      },
      "6": {
        loc: {
          start: {
            line: 25,
            column: 13
          },
          end: {
            line: 25,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 13
          },
          end: {
            line: 25,
            column: 31
          }
        }, {
          start: {
            line: 25,
            column: 35
          },
          end: {
            line: 25,
            column: 47
          }
        }],
        line: 25
      },
      "7": {
        loc: {
          start: {
            line: 34,
            column: 9
          },
          end: {
            line: 34,
            column: 24
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 34,
            column: 9
          },
          end: {
            line: 34,
            column: 14
          }
        }, {
          start: {
            line: 34,
            column: 18
          },
          end: {
            line: 34,
            column: 24
          }
        }],
        line: 34
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0]
    },
    _coverageSchema: "43e27e138ebf9cfc5966b082cf9a028302ed4184",
    hash: "95923745192ab2a91600c97b2df764bed8f97002"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  return coverage[path] = coverageData;
}();

var _ref;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var MISSING_QUERY =
/* istanbul ignore next */
(cov_1r8yxqoh8x.s[0]++, 'missing_query');
var OUTPUT_ARG_MUST_BE_STRING =
/* istanbul ignore next */
(cov_1r8yxqoh8x.s[1]++, 'output_arg_must_be_string');
var MUST_END_IN_JSON =
/* istanbul ignore next */
(cov_1r8yxqoh8x.s[2]++, 'must_end_in_json');
var ONLY_ONE_NOT_BOTH =
/* istanbul ignore next */
(cov_1r8yxqoh8x.s[3]++, 'only_one_not_both');

function getError(reason) {
  /* istanbul ignore next */
  cov_1r8yxqoh8x.f[0]++;
  cov_1r8yxqoh8x.s[4]++;
  return {
    valid: false,
    Error: reason
  };
}

var validationMap =
/* istanbul ignore next */
(cov_1r8yxqoh8x.s[5]++, (_ref = {}, _defineProperty(_ref, MISSING_QUERY, getError('Missing query')), _defineProperty(_ref, OUTPUT_ARG_MUST_BE_STRING, getError('Output argument must be string')), _defineProperty(_ref, MUST_END_IN_JSON, getError('Output argument must end in .json')), _defineProperty(_ref, ONLY_ONE_NOT_BOTH, getError('Can only use --no-display when --output is used as well')), _ref));

function getPotentialError(args) {
  /* istanbul ignore next */
  cov_1r8yxqoh8x.f[1]++;
  var error =
  /* istanbul ignore next */
  (cov_1r8yxqoh8x.s[6]++, null);

  /* istanbul ignore next */
  cov_1r8yxqoh8x.s[7]++;

  if (!args.query) {
    /* istanbul ignore next */
    cov_1r8yxqoh8x.b[0][0]++;
    cov_1r8yxqoh8x.s[8]++;
    error = MISSING_QUERY;
  } else {
    /* istanbul ignore next */
    cov_1r8yxqoh8x.b[0][1]++;
    cov_1r8yxqoh8x.s[9]++;

    if (
    /* istanbul ignore next */
    (cov_1r8yxqoh8x.b[2][0]++, args.output) &&
    /* istanbul ignore next */
    (cov_1r8yxqoh8x.b[2][1]++, typeof args.output !== 'string')) {
      /* istanbul ignore next */
      cov_1r8yxqoh8x.b[1][0]++;
      cov_1r8yxqoh8x.s[10]++;
      error = OUTPUT_ARG_MUST_BE_STRING;
    } else {
      /* istanbul ignore next */
      cov_1r8yxqoh8x.b[1][1]++;
      cov_1r8yxqoh8x.s[11]++;

      if (
      /* istanbul ignore next */
      (cov_1r8yxqoh8x.b[4][0]++, args.output) &&
      /* istanbul ignore next */
      (cov_1r8yxqoh8x.b[4][1]++, !args.output.endsWith('.json'))) {
        /* istanbul ignore next */
        cov_1r8yxqoh8x.b[3][0]++;
        cov_1r8yxqoh8x.s[12]++;
        error = MUST_END_IN_JSON;
      } else {
        /* istanbul ignore next */
        cov_1r8yxqoh8x.b[3][1]++;
        cov_1r8yxqoh8x.s[13]++;

        if (
        /* istanbul ignore next */
        (cov_1r8yxqoh8x.b[6][0]++, args['no-display']) &&
        /* istanbul ignore next */
        (cov_1r8yxqoh8x.b[6][1]++, !args.output)) {
          /* istanbul ignore next */
          cov_1r8yxqoh8x.b[5][0]++;
          cov_1r8yxqoh8x.s[14]++;
          error = ONLY_ONE_NOT_BOTH;
        } else
        /* istanbul ignore next */
        {
          cov_1r8yxqoh8x.b[5][1]++;
        }
      }
    }
  }

  /* istanbul ignore next */
  cov_1r8yxqoh8x.s[15]++;
  return validationMap[error];
}

function validateCLIArguments(args) {
  /* istanbul ignore next */
  cov_1r8yxqoh8x.f[2]++;
  var result =
  /* istanbul ignore next */
  (cov_1r8yxqoh8x.s[16]++, {
    valid: true
  });
  var error =
  /* istanbul ignore next */
  (cov_1r8yxqoh8x.s[17]++, getPotentialError(args));

  /* istanbul ignore next */
  cov_1r8yxqoh8x.s[18]++;
  return (
    /* istanbul ignore next */
    (cov_1r8yxqoh8x.b[7][0]++, error) ||
    /* istanbul ignore next */
    (cov_1r8yxqoh8x.b[7][1]++, result)
  );
}

/* istanbul ignore next */
cov_1r8yxqoh8x.s[19]++;
module.exports = validateCLIArguments;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZhbGlkYXRlQ0xJQXJndW1lbnRzLmpzIl0sIm5hbWVzIjpbIk1JU1NJTkdfUVVFUlkiLCJPVVRQVVRfQVJHX01VU1RfQkVfU1RSSU5HIiwiTVVTVF9FTkRfSU5fSlNPTiIsIk9OTFlfT05FX05PVF9CT1RIIiwiZ2V0RXJyb3IiLCJyZWFzb24iLCJ2YWxpZCIsIkVycm9yIiwidmFsaWRhdGlvbk1hcCIsImdldFBvdGVudGlhbEVycm9yIiwiYXJncyIsImVycm9yIiwicXVlcnkiLCJvdXRwdXQiLCJlbmRzV2l0aCIsInZhbGlkYXRlQ0xJQXJndW1lbnRzIiwicmVzdWx0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFNQSxhQUFhO0FBQUE7QUFBQSx3QkFBRyxlQUFILENBQW5CO0FBQ0EsSUFBTUMseUJBQXlCO0FBQUE7QUFBQSx3QkFBRywyQkFBSCxDQUEvQjtBQUNBLElBQU1DLGdCQUFnQjtBQUFBO0FBQUEsd0JBQUcsa0JBQUgsQ0FBdEI7QUFDQSxJQUFNQyxpQkFBaUI7QUFBQTtBQUFBLHdCQUFHLG1CQUFILENBQXZCOztBQUVBLFNBQVNDLFFBQVQsQ0FBa0JDLE1BQWxCLEVBQTBCO0FBQUE7QUFBQTtBQUFBO0FBQ3hCLFNBQU87QUFBRUMsSUFBQUEsS0FBSyxFQUFFLEtBQVQ7QUFBZ0JDLElBQUFBLEtBQUssRUFBRUY7QUFBdkIsR0FBUDtBQUNEOztBQUVELElBQU1HLGFBQWE7QUFBQTtBQUFBLDBEQUNoQlIsYUFEZ0IsRUFDQUksUUFBUSxDQUFDLGVBQUQsQ0FEUix5QkFFaEJILHlCQUZnQixFQUVZRyxRQUFRLENBQUMsZ0NBQUQsQ0FGcEIseUJBR2hCRixnQkFIZ0IsRUFHR0UsUUFBUSxDQUFDLG1DQUFELENBSFgseUJBSWhCRCxpQkFKZ0IsRUFJSUMsUUFBUSxDQUFDLHlEQUFELENBSlosU0FBbkI7O0FBT0EsU0FBU0ssaUJBQVQsQ0FBMkJDLElBQTNCLEVBQWlDO0FBQUE7QUFBQTtBQUMvQixNQUFJQyxLQUFLO0FBQUE7QUFBQSwwQkFBRyxJQUFILENBQVQ7O0FBRCtCO0FBQUE7O0FBRS9CLE1BQUksQ0FBQ0QsSUFBSSxDQUFDRSxLQUFWLEVBQWlCO0FBQUE7QUFBQTtBQUFBO0FBQ2ZELElBQUFBLEtBQUssR0FBR1gsYUFBUjtBQUNELEdBRkQsTUFFTztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFJO0FBQUEsK0JBQUFVLElBQUksQ0FBQ0csTUFBTDtBQUFBO0FBQUEsK0JBQWUsT0FBT0gsSUFBSSxDQUFDRyxNQUFaLEtBQXVCLFFBQXRDLENBQUosRUFBb0Q7QUFBQTtBQUFBO0FBQUE7QUFDekRGLE1BQUFBLEtBQUssR0FBR1YseUJBQVI7QUFDRCxLQUZNLE1BRUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBSTtBQUFBLGlDQUFBUyxJQUFJLENBQUNHLE1BQUw7QUFBQTtBQUFBLGlDQUFlLENBQUNILElBQUksQ0FBQ0csTUFBTCxDQUFZQyxRQUFaLENBQXFCLE9BQXJCLENBQWhCLENBQUosRUFBbUQ7QUFBQTtBQUFBO0FBQUE7QUFDeERILFFBQUFBLEtBQUssR0FBR1QsZ0JBQVI7QUFDRCxPQUZNLE1BRUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBSTtBQUFBLG1DQUFBUSxJQUFJLENBQUMsWUFBRCxDQUFKO0FBQUE7QUFBQSxtQ0FBc0IsQ0FBQ0EsSUFBSSxDQUFDRyxNQUE1QixDQUFKLEVBQXdDO0FBQUE7QUFBQTtBQUFBO0FBQzdDRixVQUFBQSxLQUFLLEdBQUdSLGlCQUFSO0FBQ0QsU0FGTTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRU47QUFBQTtBQUFBOztBQVY4QjtBQUFBO0FBVy9CLFNBQU9LLGFBQWEsQ0FBQ0csS0FBRCxDQUFwQjtBQUNEOztBQUVELFNBQVNJLG9CQUFULENBQThCTCxJQUE5QixFQUFvQztBQUFBO0FBQUE7QUFDbEMsTUFBTU0sTUFBTTtBQUFBO0FBQUEsMkJBQUc7QUFBRVYsSUFBQUEsS0FBSyxFQUFFO0FBQVQsR0FBSCxDQUFaO0FBQ0EsTUFBTUssS0FBSztBQUFBO0FBQUEsMkJBQUdGLGlCQUFpQixDQUFDQyxJQUFELENBQXBCLENBQVg7O0FBRmtDO0FBQUE7QUFHbEMsU0FBTztBQUFBO0FBQUEsK0JBQUFDLEtBQUs7QUFBQTtBQUFBLCtCQUFJSyxNQUFKO0FBQVo7QUFDRDs7OztBQUVEQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJILG9CQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE1JU1NJTkdfUVVFUlkgPSAnbWlzc2luZ19xdWVyeSc7XG5jb25zdCBPVVRQVVRfQVJHX01VU1RfQkVfU1RSSU5HID0gJ291dHB1dF9hcmdfbXVzdF9iZV9zdHJpbmcnO1xuY29uc3QgTVVTVF9FTkRfSU5fSlNPTiA9ICdtdXN0X2VuZF9pbl9qc29uJztcbmNvbnN0IE9OTFlfT05FX05PVF9CT1RIID0gJ29ubHlfb25lX25vdF9ib3RoJztcblxuZnVuY3Rpb24gZ2V0RXJyb3IocmVhc29uKSB7XG4gIHJldHVybiB7IHZhbGlkOiBmYWxzZSwgRXJyb3I6IHJlYXNvbiB9O1xufVxuXG5jb25zdCB2YWxpZGF0aW9uTWFwID0ge1xuICBbTUlTU0lOR19RVUVSWV06IGdldEVycm9yKCdNaXNzaW5nIHF1ZXJ5JyksXG4gIFtPVVRQVVRfQVJHX01VU1RfQkVfU1RSSU5HXTogZ2V0RXJyb3IoJ091dHB1dCBhcmd1bWVudCBtdXN0IGJlIHN0cmluZycpLFxuICBbTVVTVF9FTkRfSU5fSlNPTl06IGdldEVycm9yKCdPdXRwdXQgYXJndW1lbnQgbXVzdCBlbmQgaW4gLmpzb24nKSxcbiAgW09OTFlfT05FX05PVF9CT1RIXTogZ2V0RXJyb3IoJ0NhbiBvbmx5IHVzZSAtLW5vLWRpc3BsYXkgd2hlbiAtLW91dHB1dCBpcyB1c2VkIGFzIHdlbGwnKSxcbn07XG5cbmZ1bmN0aW9uIGdldFBvdGVudGlhbEVycm9yKGFyZ3MpIHtcbiAgbGV0IGVycm9yID0gbnVsbDtcbiAgaWYgKCFhcmdzLnF1ZXJ5KSB7XG4gICAgZXJyb3IgPSBNSVNTSU5HX1FVRVJZO1xuICB9IGVsc2UgaWYgKGFyZ3Mub3V0cHV0ICYmIHR5cGVvZiBhcmdzLm91dHB1dCAhPT0gJ3N0cmluZycpIHtcbiAgICBlcnJvciA9IE9VVFBVVF9BUkdfTVVTVF9CRV9TVFJJTkc7XG4gIH0gZWxzZSBpZiAoYXJncy5vdXRwdXQgJiYgIWFyZ3Mub3V0cHV0LmVuZHNXaXRoKCcuanNvbicpKSB7XG4gICAgZXJyb3IgPSBNVVNUX0VORF9JTl9KU09OO1xuICB9IGVsc2UgaWYgKGFyZ3NbJ25vLWRpc3BsYXknXSAmJiAhYXJncy5vdXRwdXQpIHtcbiAgICBlcnJvciA9IE9OTFlfT05FX05PVF9CT1RIO1xuICB9XG4gIHJldHVybiB2YWxpZGF0aW9uTWFwW2Vycm9yXTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVDTElBcmd1bWVudHMoYXJncykge1xuICBjb25zdCByZXN1bHQgPSB7IHZhbGlkOiB0cnVlIH07XG4gIGNvbnN0IGVycm9yID0gZ2V0UG90ZW50aWFsRXJyb3IoYXJncyk7XG4gIHJldHVybiBlcnJvciB8fCByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdmFsaWRhdGVDTElBcmd1bWVudHM7XG4iXX0=