9be9ecc39f9ba3e35c7809c28b69576a
"use strict";

var assert = require('assert');

var googleIt = require('../src/googleIt');

var validateCLIArguments = require('../src/validateCLIArguments');

describe('Validate output file format', function () {
  describe('# -o 12345', function () {
    it('should be invalid because output must be a string value', function () {
      assert.equal(validateCLIArguments({
        query: 'i dont know',
        output: 12345
      }).valid, false);
    });
  });
  describe('# -o whatever.jsonnn', function () {
    it('should be invalid because output file must end with .json', function () {
      assert.equal(validateCLIArguments({
        query: 'blah',
        output: 'whatever.jsonnn'
      }).valid, false);
    });
  });
  describe('# -n', function () {
    it('should be invalid because --no-display can only be used with --output', function () {
      assert.equal(validateCLIArguments({
        query: 'blah',
        'no-display': true
      }).valid, false);
    });
  });
});
describe('Ensure programmatic access works', function () {
  it('Should have results that exist', function (done) {
    var options = {
      query: 'Statue of liberty',
      'no-display': true
    };
    googleIt(options).then(function (results) {
      assert.notEqual(results, null, 'Results must exist');
      done();
    }).catch(function (err) {
      done(err);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QuanMiXSwibmFtZXMiOlsiYXNzZXJ0IiwicmVxdWlyZSIsImdvb2dsZUl0IiwidmFsaWRhdGVDTElBcmd1bWVudHMiLCJkZXNjcmliZSIsIml0IiwiZXF1YWwiLCJxdWVyeSIsIm91dHB1dCIsInZhbGlkIiwiZG9uZSIsIm9wdGlvbnMiLCJ0aGVuIiwicmVzdWx0cyIsIm5vdEVxdWFsIiwiY2F0Y2giLCJlcnIiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTUEsTUFBTSxHQUFHQyxPQUFPLENBQUMsUUFBRCxDQUF0Qjs7QUFDQSxJQUFNQyxRQUFRLEdBQUdELE9BQU8sQ0FBQyxpQkFBRCxDQUF4Qjs7QUFDQSxJQUFNRSxvQkFBb0IsR0FBR0YsT0FBTyxDQUFDLDZCQUFELENBQXBDOztBQUVBRyxRQUFRLENBQUMsNkJBQUQsRUFBZ0MsWUFBTTtBQUM1Q0EsRUFBQUEsUUFBUSxDQUFDLFlBQUQsRUFBZSxZQUFNO0FBQzNCQyxJQUFBQSxFQUFFLENBQUMseURBQUQsRUFBNEQsWUFBTTtBQUNsRUwsTUFBQUEsTUFBTSxDQUFDTSxLQUFQLENBQ0VILG9CQUFvQixDQUFDO0FBQUVJLFFBQUFBLEtBQUssRUFBRSxhQUFUO0FBQXdCQyxRQUFBQSxNQUFNLEVBQUU7QUFBaEMsT0FBRCxDQUFwQixDQUE4REMsS0FEaEUsRUFFRSxLQUZGO0FBSUQsS0FMQyxDQUFGO0FBTUQsR0FQTyxDQUFSO0FBUUFMLEVBQUFBLFFBQVEsQ0FBQyxzQkFBRCxFQUF5QixZQUFNO0FBQ3JDQyxJQUFBQSxFQUFFLENBQUMsMkRBQUQsRUFBOEQsWUFBTTtBQUNwRUwsTUFBQUEsTUFBTSxDQUFDTSxLQUFQLENBQ0VILG9CQUFvQixDQUFDO0FBQUVJLFFBQUFBLEtBQUssRUFBRSxNQUFUO0FBQWlCQyxRQUFBQSxNQUFNLEVBQUU7QUFBekIsT0FBRCxDQUFwQixDQUFtRUMsS0FEckUsRUFFRSxLQUZGO0FBSUQsS0FMQyxDQUFGO0FBTUQsR0FQTyxDQUFSO0FBUUFMLEVBQUFBLFFBQVEsQ0FBQyxNQUFELEVBQVMsWUFBTTtBQUNyQkMsSUFBQUEsRUFBRSxDQUFDLHVFQUFELEVBQTBFLFlBQU07QUFDaEZMLE1BQUFBLE1BQU0sQ0FBQ00sS0FBUCxDQUNFSCxvQkFBb0IsQ0FBQztBQUFFSSxRQUFBQSxLQUFLLEVBQUUsTUFBVDtBQUFpQixzQkFBYztBQUEvQixPQUFELENBQXBCLENBQTRERSxLQUQ5RCxFQUVFLEtBRkY7QUFJRCxLQUxDLENBQUY7QUFNRCxHQVBPLENBQVI7QUFRRCxDQXpCTyxDQUFSO0FBMkJBTCxRQUFRLENBQUMsa0NBQUQsRUFBcUMsWUFBTTtBQUNqREMsRUFBQUEsRUFBRSxDQUFDLGdDQUFELEVBQW1DLFVBQUNLLElBQUQsRUFBVTtBQUM3QyxRQUFNQyxPQUFPLEdBQUc7QUFDZEosTUFBQUEsS0FBSyxFQUFFLG1CQURPO0FBRWQsb0JBQWM7QUFGQSxLQUFoQjtBQUlBTCxJQUFBQSxRQUFRLENBQUNTLE9BQUQsQ0FBUixDQUFrQkMsSUFBbEIsQ0FBdUIsVUFBQ0MsT0FBRCxFQUFhO0FBQ2xDYixNQUFBQSxNQUFNLENBQUNjLFFBQVAsQ0FBZ0JELE9BQWhCLEVBQXlCLElBQXpCLEVBQStCLG9CQUEvQjtBQUNBSCxNQUFBQSxJQUFJO0FBQ0wsS0FIRCxFQUdHSyxLQUhILENBR1MsVUFBQ0MsR0FBRCxFQUFTO0FBQ2hCTixNQUFBQSxJQUFJLENBQUNNLEdBQUQsQ0FBSjtBQUNELEtBTEQ7QUFNRCxHQVhDLENBQUY7QUFZRCxDQWJPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcbmNvbnN0IGdvb2dsZUl0ID0gcmVxdWlyZSgnLi4vc3JjL2dvb2dsZUl0Jyk7XG5jb25zdCB2YWxpZGF0ZUNMSUFyZ3VtZW50cyA9IHJlcXVpcmUoJy4uL3NyYy92YWxpZGF0ZUNMSUFyZ3VtZW50cycpO1xuXG5kZXNjcmliZSgnVmFsaWRhdGUgb3V0cHV0IGZpbGUgZm9ybWF0JywgKCkgPT4ge1xuICBkZXNjcmliZSgnIyAtbyAxMjM0NScsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgYmVjYXVzZSBvdXRwdXQgbXVzdCBiZSBhIHN0cmluZyB2YWx1ZScsICgpID0+IHtcbiAgICAgIGFzc2VydC5lcXVhbChcbiAgICAgICAgdmFsaWRhdGVDTElBcmd1bWVudHMoeyBxdWVyeTogJ2kgZG9udCBrbm93Jywgb3V0cHV0OiAxMjM0NSB9KS52YWxpZCxcbiAgICAgICAgZmFsc2VcbiAgICAgICk7XG4gICAgfSk7XG4gIH0pO1xuICBkZXNjcmliZSgnIyAtbyB3aGF0ZXZlci5qc29ubm4nLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGJlY2F1c2Ugb3V0cHV0IGZpbGUgbXVzdCBlbmQgd2l0aCAuanNvbicsICgpID0+IHtcbiAgICAgIGFzc2VydC5lcXVhbChcbiAgICAgICAgdmFsaWRhdGVDTElBcmd1bWVudHMoeyBxdWVyeTogJ2JsYWgnLCBvdXRwdXQ6ICd3aGF0ZXZlci5qc29ubm4nIH0pLnZhbGlkLFxuICAgICAgICBmYWxzZVxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG4gIGRlc2NyaWJlKCcjIC1uJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBiZWNhdXNlIC0tbm8tZGlzcGxheSBjYW4gb25seSBiZSB1c2VkIHdpdGggLS1vdXRwdXQnLCAoKSA9PiB7XG4gICAgICBhc3NlcnQuZXF1YWwoXG4gICAgICAgIHZhbGlkYXRlQ0xJQXJndW1lbnRzKHsgcXVlcnk6ICdibGFoJywgJ25vLWRpc3BsYXknOiB0cnVlIH0pLnZhbGlkLFxuICAgICAgICBmYWxzZVxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ0Vuc3VyZSBwcm9ncmFtbWF0aWMgYWNjZXNzIHdvcmtzJywgKCkgPT4ge1xuICBpdCgnU2hvdWxkIGhhdmUgcmVzdWx0cyB0aGF0IGV4aXN0JywgKGRvbmUpID0+IHtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgcXVlcnk6ICdTdGF0dWUgb2YgbGliZXJ0eScsXG4gICAgICAnbm8tZGlzcGxheSc6IHRydWUsXG4gICAgfTtcbiAgICBnb29nbGVJdChvcHRpb25zKS50aGVuKChyZXN1bHRzKSA9PiB7XG4gICAgICBhc3NlcnQubm90RXF1YWwocmVzdWx0cywgbnVsbCwgJ1Jlc3VsdHMgbXVzdCBleGlzdCcpO1xuICAgICAgZG9uZSgpO1xuICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIGRvbmUoZXJyKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==