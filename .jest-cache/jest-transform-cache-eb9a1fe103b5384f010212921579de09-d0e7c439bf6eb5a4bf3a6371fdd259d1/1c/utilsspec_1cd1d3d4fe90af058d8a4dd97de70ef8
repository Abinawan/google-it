84850caddf58b665142004046ff600d5
"use strict";

jest.mock('fs', function () {
  return {
    writeFile: jest.fn(function (path, data, options, cb) {
      // 1st arg passed to callback is the error
      cb(true);
    })
  };
});

var _fs = _interopRequireDefault(require("fs"));

var _utils = require("../src/utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable max-params */

/* eslint-disable no-console */
global.console = {
  log: jest.fn(),
  error: jest.fn()
};
describe('getDefaultRequestOptions', function () {
  it('uses default limit, start, and userAgent when none of those are passed', function () {
    var requestOptions = (0, _utils.getDefaultRequestOptions)({
      query: 'foo'
    });
    expect(requestOptions).toEqual({
      url: 'https://www.google.com/search',
      qs: {
        q: 'foo',
        num: _utils.defaultLimit,
        start: _utils.defaultStart
      },
      headers: {
        'User-Agent': _utils.defaultUserAgent
      }
    });
  });
});
describe('getTitleSelector', function () {
  it('uses the default value when passedValue is null/undefined and the env var does not exist', function () {
    expect((0, _utils.getTitleSelector)()).toBe(_utils.titleSelector);
  });
});
describe('getLinkSelector', function () {
  it('uses the default value when passedValue is null/undefined and the env var does not exist', function () {
    expect((0, _utils.getLinkSelector)()).toBe(_utils.linkSelector);
  });
});
describe('getSnippetSelector', function () {
  it('uses the default value when passedValue is null/undefined and the env var does not exist', function () {
    expect((0, _utils.getSnippetSelector)()).toBe(_utils.snippetSelector);
  });
});
describe('logIt', function () {
  it('does not call console.log when 2nd arg passed is true', function () {
    (0, _utils.logIt)('message', true);
    expect(console.log).not.toHaveBeenCalled();
  });
  it('calls console.log when 2nd arg passed is false', function () {
    (0, _utils.logIt)('message', false);
    expect(console.log).toHaveBeenCalled();
  });
});
describe('saveToFile', function () {
  it('does not call fs.writeFile when output (1st arg) is undefined', function () {
    (0, _utils.saveToFile)();
    expect(_fs.default.writeFile).not.toHaveBeenCalled();
  });
  it('calls fs.writeFile when output exists, and console.error when an error occurs', function () {
    (0, _utils.saveToFile)('/path/to/output.json', []);
    expect(_fs.default.writeFile).toHaveBeenCalled();
    expect(console.error).toHaveBeenCalled();
  });
  it('does not call console.error when an error does not occur', function () {
    _fs.default.writeFile.mockImplementationOnce(function (path, data, options, cb) {
      cb(false);
    });

    console.error.mockClear();
    (0, _utils.saveToFile)('/path/to/output.json', []);
    expect(console.error).not.toHaveBeenCalled();
  });
});
describe('saveResponse', function () {
  it('does not call fs.writeFile when htmlFileOutputPath (2nd arg) is falsy', function () {
    _fs.default.writeFile.mockClear();

    (0, _utils.saveResponse)('random response that will not make any difference', false);
    expect(_fs.default.writeFile).not.toHaveBeenCalled();
  });
  it('calls fs.writeFile when htmlFileOutputPath exists', function () {
    _fs.default.writeFile.mockClear();

    _fs.default.writeFile.mockImplementationOnce(function (path, data, cb) {
      cb(false);
    });

    (0, _utils.saveResponse)('foo', '/path/to/my/meaningless/response.xml');
    expect(_fs.default.writeFile).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,